<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[码农明明桑]]></title>
  <subtitle><![CDATA[技术路上的一些记录]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.isming.me/"/>
  <updated>2015-08-31T12:06:15.000Z</updated>
  <id>http://blog.isming.me/</id>
  
  <author>
    <name><![CDATA[Sam]]></name>
    <email><![CDATA[ming_1990@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[改变support中AlertDialog的样式]]></title>
    <link href="http://blog.isming.me/2015/08/31/modify-alert-style/"/>
    <id>http://blog.isming.me/2015/08/31/modify-alert-style/</id>
    <published>2015-08-31T11:57:15.000Z</published>
    <updated>2015-08-31T12:06:15.000Z</updated>
    <content type="html"><![CDATA[<p>android最近的support库提供了AlertDialog，可以让我们在低于5.0的系统使用到跟5.0系统一样的Material Design风格的对话框，但是使用了一段时间想到一些办法去改变对话框按钮字体的颜色，都不生效。</p>
<p>最近在网上找到了改变的方法，首先来说一下。</p>
<a id="more"></a>
<h3 id="改变AlertDialog的样式">改变AlertDialog的样式</h3><p>在xml中定义一个主题：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"MyAlertDialogStyle"</span> <span class="attribute">parent</span>=<span class="value">"Theme.AppCompat.Light.Dialog.Alert"</span>&gt;</span><span class="css"></span><br><span class="line">    &lt;!<span class="tag">--</span> <span class="tag">Used</span> <span class="tag">for</span> <span class="tag">the</span> <span class="tag">buttons</span> <span class="tag">--</span>&gt;</span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">colorAccent</span>"&gt;<span class="id">#FFC107</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">    &lt;!<span class="tag">--</span> <span class="tag">Used</span> <span class="tag">for</span> <span class="tag">the</span> <span class="tag">title</span> <span class="tag">and</span> <span class="tag">text</span> <span class="tag">--</span>&gt;</span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="rule"><span class="attribute">android</span>:<span class="value">textColorPrimary<span class="string">"&gt;#FFFFFF&lt;/item&gt;</span><br><span class="line">    &lt;!-- Used for the background --&gt;</span><br><span class="line">    &lt;item name="</span>android:background<span class="string">"&gt;#4CAF50&lt;/item&gt;</span><br><span class="line"></span></span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>样式如下图所示：</p>
<p><img src="http://7mj53c.com1.z0.glb.clouddn.com/2015/modify_dialog_style.jpg" alt=""></p>
<p>在创建的对话框的时候，这样创建就可以了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>, R.style.MyAlertDialogStyle);</span><br><span class="line">builder.setTitle(<span class="string">"AppCompatDialog"</span>);</span><br><span class="line">builder.setMessage(<span class="string">"Lorem ipsum dolor..."</span>);</span><br><span class="line">builder.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">null</span>);</span><br><span class="line">builder.setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">null</span>);</span><br><span class="line">builder.show();</span><br></pre></td></tr></table></figure></p>
<p>这样的方法是每个地方使用的时候，都要在构造函数传我们的这个Dialog的Theme，我们也可以全局的定义对话框的样式。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"MyTheme"</span> <span class="attribute">parent</span>=<span class="value">"Base.Theme.AppCompat.Light"</span>&gt;</span><span class="css"></span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">alertDialogTheme</span>"&gt;<span class="at_rule">@<span class="keyword">style/MyAlertDialogStyle&lt;/item&gt;</span></span><br><span class="line">    &lt;item name=<span class="string">"colorAccent"</span>&gt;@color/accent&lt;/item&gt;</span><br><span class="line"></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在我们的AndroidManifest.xml文件中声明application或者activity的时候设置theme为MyTheme即可，不过需要注意的一点是，我们的Activity需要继承自AppCompatActivity。</p>
<p>###其他</p>
<p>从上面改变对话框的样式，可以想到用同样的思路来实现应用的换肤，应用主题之类的功能。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/08/31/modify-alert-style/">http://blog.isming.me/2015/08/31/modify-alert-style/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>android最近的support库提供了AlertDialog，可以让我们在低于5.0的系统使用到跟5.0系统一样的Material Design风格的对话框，但是使用了一段时间想到一些办法去改变对话框按钮字体的颜色，都不生效。</p>
<p>最近在网上找到了改变的方法，首先来说一下。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个上传apk到fir的gradle插件]]></title>
    <link href="http://blog.isming.me/2015/08/01/gradle-fir-plugin/"/>
    <id>http://blog.isming.me/2015/08/01/gradle-fir-plugin/</id>
    <published>2015-08-01T15:19:07.000Z</published>
    <updated>2015-08-01T15:39:27.000Z</updated>
    <content type="html"><![CDATA[<p>声明，这不是广告，没有任何利益瓜葛。</p>
<p>App内测需要把安装把安装包放在一个地方进行托管，方便内测人员下载。国内有蒲公英，fir，等等这些网站可以用。</p>
<p>最近fir上了新版本了，上了新的api，新界面，本以为它们会提供gradle的上传工具，结果没有，而且它们新版本还不好用，原本的下载统计浏览统计都没有了，结果上传很慢，甚至上传不了，我便写了一个gradle的上传工具。</p>
<a id="more"></a>
<p>先介绍使用方法吧</p>
<h3 id="使用方法">使用方法</h3><p>插件目前只有唯一一个task</p>
<blockquote>
<p>uploadFir  –上传apk到fir</p>
</blockquote>
<p>集成插件本插件，你要按照如下方法使用</p>
<h4 id="编辑build-gradle">编辑build.gradle</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.squareup.okhttp:okhttp:2.2.0'</span></span><br><span class="line">        classpath <span class="string">'com.squareup.okhttp:okhttp-urlconnection:2.2.0'</span></span><br><span class="line">        classpath <span class="string">'org.json:json:20090211'</span></span><br><span class="line">        classpath <span class="string">'me.isming:firup:0.4.1'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.isming.fir'</span></span><br><span class="line"></span><br><span class="line">fir &#123;</span><br><span class="line">    appId = <span class="string">""</span>   <span class="comment">//app的appid,在fir中可以找到</span></span><br><span class="line">    userToken = <span class="string">""</span>  <span class="comment">//fir用户的token，也在在fir中找到</span></span><br><span class="line"></span><br><span class="line">    apks &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 要上传的apk的路径,类似下面</span></span><br><span class="line">            sourceFile  file(<span class="string">"/project/main/build/outputs/apk/xxx.apk"</span>)</span><br><span class="line">            name <span class="string">""</span>  <span class="comment">//app的名称</span></span><br><span class="line">            version <span class="string">"3.3.0"</span>  <span class="comment">//app的版本version</span></span><br><span class="line">            build <span class="string">"330"</span>   <span class="comment">//app的版本号</span></span><br><span class="line">            changelog <span class="string">""</span>  <span class="comment">//更新日志</span></span><br><span class="line">            icon file(<span class="string">"....../res/drawable-xxhdpi/icon_logo.png"</span>)  <span class="comment">//app的icon的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####运行</p>
<blockquote>
<p>$ ./gradlew uploadFir</p>
</blockquote>
<p>你也可以在本任务的基础上，在你的build脚本中增加以下内容:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uploadFir.dependsOn assembleRelease  <span class="comment">//后面为你生成apk的任务</span></span><br></pre></td></tr></table></figure>
<p>这样就可以在执行上传到fir之前首先会生成一个最新的安装包了</p>
<p>本插件基于fir.im官方提供的api文档进行编写，时间匆忙，可能还有一些地方不够完善，还有许多地方可以优化，欢迎star，fork，共同完善。</p>
<p>也可以给我提意见，我来优化。</p>
<p>还有一些代优化的点没有做，后面有空会做，version，build，icon通过程序自动做，而不用手工填写。</p>
<p>项目托管在github上面，生成的jar放在jcenter上面。</p>
<p>github地址：<a href="https://github.com/sangmingming/gradle-fir-plugin" target="_blank" rel="external">https://github.com/sangmingming/gradle-fir-plugin</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/08/01/gradle-fir-plugin/">http://blog.isming.me/2015/08/01/gradle-fir-plugin/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>声明，这不是广告，没有任何利益瓜葛。</p>
<p>App内测需要把安装把安装包放在一个地方进行托管，方便内测人员下载。国内有蒲公英，fir，等等这些网站可以用。</p>
<p>最近fir上了新版本了，上了新的api，新界面，本以为它们会提供gradle的上传工具，结果没有，而且它们新版本还不好用，原本的下载统计浏览统计都没有了，结果上传很慢，甚至上传不了，我便写了一个gradle的上传工具。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="android studio" scheme="http://blog.isming.me/tags/android-studio/"/>
    
      <category term="gradle" scheme="http://blog.isming.me/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android应用使用自定义字体的一些探究]]></title>
    <link href="http://blog.isming.me/2015/07/07/android-custom-font/"/>
    <id>http://blog.isming.me/2015/07/07/android-custom-font/</id>
    <published>2015-07-07T11:04:22.000Z</published>
    <updated>2015-07-07T11:33:34.000Z</updated>
    <content type="html"><![CDATA[<p>最近团队里面在做程序界面统一的工作，因此希望统一字体，接到一个研究怎么自定义字体的任务。因为我们的开发模式，所以需要研究在界面内的字体自定义，以及webview的显示中的字体自定义。</p>
<h3 id="android系统内置字体">android系统内置字体</h3><p>android 系统本身内置了一些字体，可以在程序中使用，并且支持在xml配置textView的时候进行修改字体的样式。支持字段为<code>android:textStyle</code> ,<code>android:typeface</code>, <code>android:fontFamily</code>，系统内置了<code>normal|bold|italic</code>三种style, 内置了<code>normal</code>，<code>sans</code>,<code>serif</code>,<code>monospace</code>，几种字体（实测这几种字体仅英文有效），typace和fontFamily功能一样。</p>
<a id="more"></a>
<h3 id="使用自定义的字体">使用自定义的字体</h3><p>以上的方式可以改变字体的样式，还不是真正的自定义。</p>
<p>android系统支持TypeFace，即ttf的字体文件。</p>
<p>我们可以在程序中放入ttf字体文件，在程序中使用Typeface设置字<br>体。</p>
<p>第一步，在assets目录下新建fonts目录，把ttf字体文件放到这。<br>第二步，程序中调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AssetManager mgr=getAssets();<span class="comment">//得到AssetManager</span></span><br><span class="line">Typeface tf=Typeface.createFromAsset(mgr, <span class="string">"fonts/ttf.ttf"</span>);<span class="comment">//根据路径得到Typeface</span></span><br><span class="line">tv.setTypeface(tf);<span class="comment">//设置字体</span></span><br></pre></td></tr></table></figure>
<p>注意ttf文件命名不能使用中文,否则可能无法加载。</p>
<p>对于需要使用比较多的地方，可以写一个TextView的子类来统一处理。</p>
<h3 id="在webview中使用自定义地体">在webview中使用自定义地体</h3><p>对于本地的网页，在asset目录放字体文件，并在css中添加以下内容，自定义一个字体face，并且在需要的地方使用这个字体face即可。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="at_rule">@<span class="keyword">font-face</span></span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">font-family</span>:<span class="value"> <span class="string">"MyFont"</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">src</span>:<span class="value"> <span class="function">url</span>(<span class="string">'file:///android_asset/fonts/ttf.ttf'</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h3</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-family</span>:<span class="value"><span class="string">"MyFont"</span>&#125;</span></span></span></span><br></pre></td></tr></table></figure>
<p>对于在线的网页，则需要把字体文件放到服务器，使用同样的方式定义字体face,应用到每个地方。</p>
<p>为了减少网页或者说服务器端的工作，可以使用本地注入的方式注入font-face的css，并对整个网页进行样式替换。</p>
<p>给webview自定义webViewClient,重写<code>onPageFinish</code>,在其中添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">view.loadUrl(<span class="string">"javascript:!function()&#123;"</span> +</span><br><span class="line">        <span class="string">"s=document.createElement('style');s.innerHTML="</span></span><br><span class="line">        + <span class="string">"\"@font-face&#123;font-family:myhyqh;src:url('**injection**/hyqh.ttf');&#125;*&#123;font-family:myhyqh !important;&#125;\";"</span></span><br><span class="line">        + <span class="string">"document.getElementsByTagName('head')[0].appendChild(s);"</span> +</span><br><span class="line">        <span class="string">"document.getElementsByTagName('body')[0].style.fontFamily = \"myhyqh\";&#125;()"</span>);</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">由于网页上是没有权限访问本地的asset文件夹的，因此我们需要拦截请求来加载本地的文件，我这里替换了`file:<span class="comment">///android_assets/`为 `**injection**/`了，我们还需要重写</span></span><br><span class="line">`shouldInterceptRequest`</span><br><span class="line">在请求为我们这个字体文件的时候，加载本地文件：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebResourceResponse <span class="title">shouldInterceptRequest</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    WebResourceResponse response =  <span class="keyword">super</span>.shouldInterceptRequest(view, url);</span><br><span class="line">    CLog.i(<span class="string">"load intercept request:"</span> + url);</span><br><span class="line">    <span class="keyword">if</span> (url != <span class="keyword">null</span> &amp;&amp; url.contains(<span class="string">"**injection**/"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String assertPath = url.replace("**injection**/", "");</span></span><br><span class="line">        String assertPath = url.substring(url.indexOf(<span class="string">"**injection**/"</span>) + <span class="string">"**injection**/"</span>.length(), url.length());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            response = <span class="keyword">new</span> WebResourceResponse(<span class="string">"application/x-font-ttf"</span>,</span><br><span class="line">                    <span class="string">"UTF8"</span>, getAssets().open(assertPath)</span><br><span class="line">                    );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###问题</p>
<p>使用字体统一界面，但是也遇到了一些问题，如下：</p>
<ol>
<li>运行速度变慢（毫秒级，用户觉查不到），由于需要读取自定义的字体文件，以及需要渲染，比使用系统字体要慢。</li>
<li>emoji在5.0以下的系统会有问题。</li>
<li>在网页，如果采用服务器文件的方法，会消耗用户的流量</li>
<li>在网页，采用本地注入方式，因为是在onpagefinish后才开始加载字体，因此页面会重新渲染，影响效果。这样还会造成网页可能会出现样式错误。</li>
</ol>
<p>因为我们的程序中大量使用到emoji，以及考虑到性能的问题，决定还是使用系统自带的字体了。</p>
<p>如果你在这方面有更好的方案，欢迎交流！</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/07/07/android-custom-font/">http://blog.isming.me/2015/07/07/android-custom-font/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近团队里面在做程序界面统一的工作，因此希望统一字体，接到一个研究怎么自定义字体的任务。因为我们的开发模式，所以需要研究在界面内的字体自定义，以及webview的显示中的字体自定义。</p>
<h3 id="android系统内置字体">android系统内置字体</h3><p>android 系统本身内置了一些字体，可以在程序中使用，并且支持在xml配置textView的时候进行修改字体的样式。支持字段为<code>android:textStyle</code> ,<code>android:typeface</code>, <code>android:fontFamily</code>，系统内置了<code>normal|bold|italic</code>三种style, 内置了<code>normal</code>，<code>sans</code>,<code>serif</code>,<code>monospace</code>，几种字体（实测这几种字体仅英文有效），typace和fontFamily功能一样。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图片贴纸旋转缩放功能的实现]]></title>
    <link href="http://blog.isming.me/2015/05/10/sticker-view/"/>
    <id>http://blog.isming.me/2015/05/10/sticker-view/</id>
    <published>2015-05-10T14:55:04.000Z</published>
    <updated>2015-05-09T16:57:51.000Z</updated>
    <content type="html"><![CDATA[<p>我们的项目包含图片编辑功能，特别是包含图片添加水印贴纸的功能，从最初的简单版可以添加一个图片并且移动位置，到现在添加的图片可以进行移动，以及缩放，旋转，已经是和其他的图片处理可以达到一样的很好的效果了。一直想要整理一下，分享一下实现的改进过程，一直没空，也由于我过于懒，没有动笔。今天正好有时间，分享一下。</p>
<a id="more"></a>
<h3 id="原始阶段：直接添加ImageView，并且设置其在父view中的位置">原始阶段：直接添加ImageView，并且设置其在父view中的位置</h3><p>父视图为RelativeLayout,贴纸view就是一个ImageView,通过设置topMargin和leftMargin来设置在父视图中显示的位置，不支持缩放和旋转。功能快速实现，代码比较冗余。再有了新的需求不方便扩展。</p>
<h3 id="新阶段：自定义View，通过matrix变换实现各种功能">新阶段：自定义View，通过matrix变换实现各种功能</h3><p>主要是定义一个View，在使用的时候放到需要用到的地方，大小设置和目标图片相同大小。通过matrix对平移，旋转，缩放的操作进行映射，最终改变贴纸图片的绘制结果，因此实现目标功能。下面具体分析各个功能。</p>
<p>首先创建的视图在设置完贴纸图片之后，要创建一个浮点型数组，用于保存默认未进行任何变换的时候贴纸图片的关键点，以及一个原始矩形用于保存一个默认绘制区域的矩形，用代码表示就是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> imgWidth = mBitmap.getWidth();</span><br><span class="line"><span class="keyword">float</span> imgHeight = mBitmap.getHeight();</span><br><span class="line"><span class="keyword">float</span>[] originPoints = <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, imgWidth,<span class="number">0</span>, imgWidth, imgHeight, <span class="number">0</span>, imgHeight, imgWidth/<span class="number">2</span>, imgHeight/<span class="number">2</span>&#125;; <span class="comment">//分别为矩形的四个点，与中心点</span></span><br><span class="line">RectF mOriginRect = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, imgWidth, imgHeight);</span><br></pre></td></tr></table></figure></p>
<p>变换后的点通过Matrix.mapPoints(newPoints, originPoints)进行映射，变换后的矩形通过Matrix.mapRect(newRect, originRect)进行映射，可以通过这些新的点画一些附加元素。至于贴纸图，可以通过获取后的rect进行定位画，也可以直接使用canvas.drawBitmap(bitmap, matrix, paint)方法绘制。</p>
<p>至于如何进行变换操作，如何进行变换，则是在onTouch中处理各种触摸事件，或者在dispatchTouchEvent。</p>
<h4 id="平移">平移</h4><p>通过判断ACTION_DOWN，ACTION_UP，判断触摸是否在我们的贴纸图片上面，然后计算手指滑动的距离，可以获取到x轴和y轴的平移距离，调用mMatrix.postTranslate(x,y)，然后重新映射绘图即可。</p>
<h4 id="旋转">旋转</h4><p>以贴纸图片的一个边缘点为旋转触摸点，以贴纸图片的中心（非贴纸view的中心），计算旋转的角度，调用mMatrix.postRotate(rotation, px, py)， px，py为贴纸图片的中心点（为上面映射后的点，而不是原始点）。</p>
<h4 id="缩放">缩放</h4><p>同样通过触摸位置计算两次滑动过程中的缩放比例，来通过Matrix.postScale(scale, scale, px, py)进行缩放。</p>
<h3 id="其他">其他</h3><p>开始的时候没有想到使用Matrix，进行了很多的尝试，没有很好的结果。最后使用了Matrix之后，则简单很多，只是在计算缩放和旋转的时候，因为数学没有学好，花了很久才把数学问题搞定。</p>
<p>这里分享我自己的一个完整的贴纸View，开箱即用，<a href="https://github.com/sangmingming/StickerView" target="_blank" rel="external">https://github.com/sangmingming/StickerView</a> 。如果在这方面，你又更好的实现方式，也欢迎留言，与我进行交流。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/05/10/sticker-view/">http://blog.isming.me/2015/05/10/sticker-view/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们的项目包含图片编辑功能，特别是包含图片添加水印贴纸的功能，从最初的简单版可以添加一个图片并且移动位置，到现在添加的图片可以进行移动，以及缩放，旋转，已经是和其他的图片处理可以达到一样的很好的效果了。一直想要整理一下，分享一下实现的改进过程，一直没空，也由于我过于懒，没有动笔。今天正好有时间，分享一下。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[打破Android应用65K方法数魔咒]]></title>
    <link href="http://blog.isming.me/2015/05/01/android-multi-dex/"/>
    <id>http://blog.isming.me/2015/05/01/android-multi-dex/</id>
    <published>2015-04-30T16:33:08.000Z</published>
    <updated>2015-04-30T16:48:07.000Z</updated>
    <content type="html"><![CDATA[<p>近日，我们的应用，在编译的时候不幸的遇到这个错误</p>
<blockquote>
<p>Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536</p>
</blockquote>
<p>这才让我意识到原来我们的程序中，方法数已经超过了65536。在之前，已经知道了android系统的java虚拟机dalvik在执行java程序时，使用原生类型short来索引dex文件中的方法，因此方法数就呗限制在65536了。之前我一直以为，这个数量已经很大了，不会达到上限，结果今天就达到了。</p>
<p>不过这个东西呢，我们也是很容易的进行解决的，因为，就在去年不久前，google官方提供了多dex的支持库，因此，我们可以很简单的解决这个问题。</p>
<a id="more"></a>
<h3 id="开发工具升级">开发工具升级</h3><p>将android sdks build tools 和android support library要升级到最新的，这个使用android sdks manager很容易就完成了。</p>
<h3 id="配置build-gradle">配置build.gradle</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">android &#123; </span><br><span class="line">compileSdkVersion 21 </span><br><span class="line">buildToolsVersion "21.1.0" </span><br><span class="line">defaultConfig &#123;     </span><br><span class="line">...     </span><br><span class="line">minSdkVersion 14     </span><br><span class="line">targetSdkVersion 21     </span><br><span class="line">...     </span><br><span class="line">// Enabling multidex support.     </span><br><span class="line">multiDexEnabled true </span><br><span class="line">&#125; </span><br><span class="line">... </span><br><span class="line">&#125; </span><br><span class="line">dependencies&#123; </span><br><span class="line">compile 'com.android.support:multidex:1.0.0’ //dependencies</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="让应用支持多dex">让应用支持多dex</h3><p>androidManifest.xml中application中声明android.support.multidex.MultiDexApplication;</p>
<p>或自己定义一个Application类，继承自MultiDexApplication；</p>
<p>或者自己定义的Application类，在attachBaseContext()方法中，添加MultiDex.install(this);</p>
<h3 id="其他">其他</h3><p>通过上面的方法即可轻松完成多dex，不过在低版本的android系统（低于android4.0）可能会有bug出现，还要多进行测试。</p>
<p>究其原因，其实我们的app，自己写的代码现在其实不是很多，代码中使用了大量的第三方sdk，以及其他的一些功能集成。</p>
<p>下面，就要想办法，减少第三方的功能库了。这里跟大家分享一下解决方案。</p>
<p>参考资料： <a href="http://developer.android.com/tools/building/multidex.html" target="_blank" rel="external">http://developer.android.com/tools/building/multidex.html</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/05/01/android-multi-dex/">http://blog.isming.me/2015/05/01/android-multi-dex/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>近日，我们的应用，在编译的时候不幸的遇到这个错误</p>
<blockquote>
<p>Conversion to Dalvik format failed: Unable to execute dex: method ID not in [0, 0xffff]: 65536</p>
</blockquote>
<p>这才让我意识到原来我们的程序中，方法数已经超过了65536。在之前，已经知道了android系统的java虚拟机dalvik在执行java程序时，使用原生类型short来索引dex文件中的方法，因此方法数就呗限制在65536了。之前我一直以为，这个数量已经很大了，不会达到上限，结果今天就达到了。</p>
<p>不过这个东西呢，我们也是很容易的进行解决的，因为，就在去年不久前，google官方提供了多dex的支持库，因此，我们可以很简单的解决这个问题。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[加速Android Studio/Gradle构建]]></title>
    <link href="http://blog.isming.me/2015/03/18/android-build-speed-up/"/>
    <id>http://blog.isming.me/2015/03/18/android-build-speed-up/</id>
    <published>2015-03-18T14:56:10.000Z</published>
    <updated>2015-03-18T06:05:04.000Z</updated>
    <content type="html"><![CDATA[<p>已经使用Android Studio进行开发超过一年，随着项目的增大，依赖库的增多，构建速度越来越慢，现在最慢要6分钟才能build一个release的安装包，在网上查找资料，发现可以通过一些配置可以加快速度，这里跟大家分享一下。</p>
<h3 id="开启gradle单独的守护进程">开启gradle单独的守护进程</h3><p>在下面的目录下面创建<code>gradle.properties</code>文件：</p>
<ul>
<li><code>/home/&lt;username&gt;/.gradle/</code> (Linux)     </li>
<li><code>/Users/&lt;username&gt;/.gradle/</code> (Mac)</li>
<li><code>C:\Users\&lt;username&gt;\.gradle</code> (Windows)</li>
</ul>
<p>并在文件中增加：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.daemon=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>同时修改项目下的<code>gradle.properties</code>文件也可以优化：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Project-wide Gradle settings.</span><br><span class="line"></span><br><span class="line"># IDE (e.g. Android Studio) users:</span><br><span class="line"># Settings specified in this file will override any Gradle settings</span><br><span class="line"># configured through the IDE.</span><br><span class="line"></span><br><span class="line"># For more details on how to configure your build environment visit</span><br><span class="line"># http://www.gradle.org/docs/current/userguide/build_environment.html</span><br><span class="line"></span><br><span class="line"># The Gradle daemon aims to improve the startup and execution time of Gradle.</span><br><span class="line"># When set to true the Gradle daemon is to run the build.</span><br><span class="line"># TODO: disable daemon on CI, since builds should be clean and reliable on servers</span><br><span class="line">org.gradle.daemon=true</span><br><span class="line"></span><br><span class="line"># Specifies the JVM arguments used for the daemon process.</span><br><span class="line"># The setting is particularly useful for tweaking memory settings.</span><br><span class="line"># Default value: -Xmx10248m -XX:MaxPermSize=256m</span><br><span class="line">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span><br><span class="line"></span><br><span class="line"># When configured, Gradle will run in incubating parallel mode.</span><br><span class="line"># This option should only be used with decoupled projects. More details, visit</span><br><span class="line"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span><br><span class="line">org.gradle.parallel=true</span><br><span class="line"></span><br><span class="line"># Enables new incubating mode that makes Gradle selective when configuring projects. </span><br><span class="line"># Only relevant projects are configured which results in faster builds for large multi-projects.</span><br><span class="line"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand</span><br><span class="line">org.gradle.configureondemand=true</span><br></pre></td></tr></table></figure>
<p>同时上面的这些参数也可以配置到前面的用户目录下的gradle.properties文件里，那样就不是针对一个项目生效，而是针对所有项目生效。</p>
<p>上面的配置文件主要就是做， 增大gradle运行的java虚拟机的大小，让gradle在编译的时候使用独立进程，让gradle可以平行的运行。</p>
<h3 id="修改android_studio配置">修改android studio配置</h3><p>在android studio的配置中，开启offline模式，以及修改配置。实际上的配置和上面的一大段一样，主要是在这个地方配置的只会在ide构建的时候生效，命令行构建不会生效。</p>
<p><img src="http://isming.qiniudn.com/as_gradle_offline.png" alt="开启offline"></p>
<p><img src="http://isming.qiniudn.com/as_gradle_config.png" alt="设置运行模式和VM配置"></p>
<h3 id="命令行构建">命令行构建</h3><p>基于上面的配置，命令行构建时在命令后面加上这个参数即可 <code>--daemon --parallel --offline</code>。</p>
<h3 id="引入依赖库时使用aar">引入依赖库时使用aar</h3><p>使用网上第三方的依赖库时尽量使用aar，可以在maven<a href="http://gradleplease.appspot.com/" target="_blank" rel="external">http://gradleplease.appspot.com/</a>或者githu<a href="https://github.com/Goddchen/mvn-repo" target="_blank" rel="external">https://github.com/Goddchen/mvn-repo</a>搜索。</p>
<p>自己的库模块也可以打包成aar，关于这个可以参考stormzhang的文章<a href="http://www.stormzhang.com/android/2015/03/01/android-reference-local-aar/" target="_blank" rel="external">http://www.stormzhang.com/android/2015/03/01/android-reference-local-aar/</a>。</p>
<h3 id="后记">后记</h3><p>经过这样一番折腾，我原来需要4，5分钟才能构建完成的项目，现在只需要30秒左右就可以构建完成了。当然了，如果你这样还是不可以的话，那么，你应该换电脑了，ssd的硬盘，更大的内存，必须的上了。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/03/18/android-build-speed-up/">http://blog.isming.me/2015/03/18/android-build-speed-up/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>已经使用Android Studio进行开发超过一年，随着项目的增大，依赖库的增多，构建速度越来越慢，现在最慢要6分钟才能build一个release的安装包，在网上查找资料，发现可以通过一些配置可以加快速度，这里跟大家分享一下。</p>
<h3 id="开启gradle单独的守护进程">开启gradle单独的守护进程</h3><p>在下面的目录下面创建<code>gradle.properties</code>文件：</p>
<ul>
<li><code>/home/&lt;username&gt;/.gradle/</code> (Linux)     </li>
<li><code>/Users/&lt;username&gt;/.gradle/</code> (Mac)</li>
<li><code>C:\Users\&lt;username&gt;\.gradle</code> (Windows)</li>
</ul>
<p>并在文件中增加：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.daemon=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="android studio" scheme="http://blog.isming.me/tags/android-studio/"/>
    
      <category term="gradle" scheme="http://blog.isming.me/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java注解]]></title>
    <link href="http://blog.isming.me/2015/03/06/java-annotation/"/>
    <id>http://blog.isming.me/2015/03/06/java-annotation/</id>
    <published>2015-03-05T16:19:19.000Z</published>
    <updated>2015-03-07T16:28:33.000Z</updated>
    <content type="html"><![CDATA[<p>从java 5.0开始，为我们提供注解功能，通过注解可以限制代码的重载，过时，以及实现一些其他功能，这里，就来分析一下java的注解。</p>
<h3 id="java_元注解">java 元注解</h3><p>首先来看java元注解，分别是：</p>
<a id="more"></a>
<blockquote>
<p>@Target</p>
<p>@Retention</p>
<p>@Documented</p>
<p>@Inherited</p>
</blockquote>
<p>这些注解和他们所修饰的类在java.lang.annotation包中，代码都很简单，可以去查看一下。</p>
<p>@Target 描述注解的使用范围，取值：</p>
<blockquote>
<p>ElementType.CONSTRUCTOR:描述构造器<br>ElementType.FIELD:描述成员变量<br>ElementType.VARIABLE: 描述局部变量<br>ElementType.METHOD: 描述方法<br>ElementType.PACKAGE: 描述包<br>ElementType.PARAMETER：描述方法的参数<br>ElementType.Type: 描述类，接口（包括注解类型）或enum声明.</p>
</blockquote>
<p>@Retention 注解的声明周期，即在什么级别保留，取值：</p>
<blockquote>
<p>RetentionPoicy.SOURCE :在源文件中有效（在.java文件中有效）<br>RetentionPoicy.CLASS: 在class文件中有效<br>RetentionPoicy.RUNTIME:在运行时有效</p>
</blockquote>
<p>@Documented 用于描述其他类型的annotation应该被作为被标注的程序成员的公共API，可以被javdoc的工具文档化，无成员。</p>
<p>@Inherited 用于标注某个标注是被继承的，即父类中使用了一个Annotation，则子类继承父类的这个annotation，annotation需要标记为RUNTIME的才可以。</p>
<h3 id="java内置注解">java内置注解</h3><p>以上是元标记，再看java内置的标准注解，@Override，@Deprecated， @SuppressWarnings</p>
<p>@Override</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从前面的元注解介绍可以看到，Override用于标注方法，有效期是在源码期间。用于标注方法重写。</p>
<p>@Deprecated</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Documented</span></span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>标注 过时，或者不建议使用，也是会保留到运行时，添加了Documented元标签，这样在生成文档时候，就可以生成过时的标记。</p>
<p>@SuppressWarnings</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>忽略错误报告，有效时是源码级。</p>
<h3 id="自定义注解">自定义注解</h3><p>我们再来看看如何自定义注解。自定义的注解就和java内置的注解类似，也需要用到元注解，通过远注解设置那些地方可以使用，设置作用域。比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="annotation">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> MyAnnotation &#123;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="annotation">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> MyNewAnnotation&#123;</span><br><span class="line">     <span class="function">String <span class="title">author</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">version</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">     <span class="annotation">@MyAnnotation</span>(<span class="number">12</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="annotation">@MyNewAnnotation</span>(author=“sam”, version=<span class="number">2</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">19</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面前面的代码是定义注解，后面是使用。可以看到使用@interface来定义注解。</p>
<p>注解配置参数名为注解类的方法名，并且方法没有方法体，没有参数没有修饰符，不可以抛异常。返回值只能是基本类型,String,Class,annotation,enumeration，或者他们的一维数组。只有一个默认属性，可以直接用value()函数，没有属性，则这个注解是标记注解。可以加default表示默认值。</p>
<h3 id="Android内置注解">Android内置注解</h3><p>作为android程序员，我们还是了解一下android中自带的注解，以及用法含义。</p>
<p><code>@SuppressLint</code>： 指示lint检查时忽略注解元素的警告信息。<br><code>@TargetApi</code>:指示lint把当前这个注解元素的target api为指定值，而不是项目设置的target api。<br><code>@NonNull</code>:表示一个成员变量，或者参数，或者方法返回值永远不能为NULL。<br><code>@Nullable</code>:标识一个成员变量，或者参数，方法返回值，可以为NULL。               </p>
<p>android.support.annotation包中还有更多的注解可以使用。</p>
<p>另外，<a href="http://codekk.com/open-source-project-analysis/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8BJava%20%E6%B3%A8%E8%A7%A3%20Annotation" target="_blank" rel="external">http://codekk.com/open-source-project-analysis/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8BJava%20%E6%B3%A8%E8%A7%A3%20Annotation</a>对于注解的分析很好，推荐一下。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/03/06/java-annotation/">http://blog.isming.me/2015/03/06/java-annotation/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>从java 5.0开始，为我们提供注解功能，通过注解可以限制代码的重载，过时，以及实现一些其他功能，这里，就来分析一下java的注解。</p>
<h3 id="java_元注解">java 元注解</h3><p>首先来看java元注解，分别是：</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="java" scheme="http://blog.isming.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android动画-View Animation]]></title>
    <link href="http://blog.isming.me/2015/02/01/android-view-animation/"/>
    <id>http://blog.isming.me/2015/02/01/android-view-animation/</id>
    <published>2015-02-01T03:10:50.000Z</published>
    <updated>2015-02-01T03:26:36.000Z</updated>
    <content type="html"><![CDATA[<p>视图动画（View Animation）,又称补间动画（Tween Animation）,即给出两个关键帧，通过一些算法将给定属性值在给定的时间内在两个关键帧间渐变。本文首先讲解各种基本动画的使用，其实介绍View动画的工作过程。</p>
<h3 id="概述">概述</h3><p>视图动画只能作用于View对象，是对View的变换，默认支持的类型有：</p>
<ul>
<li>透明度变化(AlphaAnimation)</li>
<li>缩放(ScaleAnimation)</li>
<li>位移(TranslateAnimation)</li>
<li>旋转(RotateAnimation)</li>
</ul>
<p>可以使用AnimationSet让多个动画集合在一起运行，使用插值器(Interpolator)设置动画的速度。</p>
<a id="more"></a>
<p>上面说到的几种动画，以及AnimationSet都是Animation的之类，因此Animation中有的属性，以及xml的配置属性，他们都有，因此，单独说每个动画的时候只说其特有的方法和属性。对于使用xml配置时需要放到res下面的animation文件夹下。</p>
<h3 id="AlphaAnimation_透明度动画">AlphaAnimation 透明度动画</h3><p>就是改变视图的透明度，可以实现淡入淡出等动画。这个动画比较简单只需要设置开始透明度和结束透明度即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animation animation = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.1f</span>, <span class="number">1.0f</span>); <span class="comment">//fromAlpha 0.1f   toAlpha 1.0f</span></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">alpha</span> <span class="attribute">android:fromAlpha</span> = "<span class="attribute">0.1f</span>" <span class="attribute">android:toAlpha</span>=<span class="value">"1.0f"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ScaleAnimation_缩放">ScaleAnimation 缩放</h3><p>缩放动画，支持设置开始x缩放（宽度缩放倍数），开始y缩放， 结束x缩放，结束y缩放，以及缩放基点x坐标，缩放基点y坐标。</p>
<p>x缩放和y缩放都是相对于原始的宽度和高度的，1.0表示不缩放。</p>
<p>坐标基点，同时有参数可以设置坐标基点类型，分别是：</p>
<ul>
<li><code>Animation.ABSOLUTE</code>(默认值) 相对于控件的0点的坐标值</li>
<li><code>Animation.RELATIVE_TO_SELF</code> 相对于自己宽或者高的百分比（1.0表示100%）</li>
<li><code>Animation.RELATIVE_TO_PARENT</code> 相对于父控件的宽或者高的百分比.</li>
</ul>
<p>默认基点是视图的0点，默认坐标基点类型是ABSOLUTE。</p>
<p>有如下几种构造函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ScaleAnimation(Context context, AttributeSet attrs)</span><br><span class="line">ScaleAnimation(<span class="keyword">float</span> fromX, <span class="keyword">float</span> toX, <span class="keyword">float</span> fromY, <span class="keyword">float</span> toY)</span><br><span class="line"><span class="keyword">new</span> ScaleAnimation(<span class="number">1.0f</span>, <span class="number">1.5f</span>, <span class="number">1.0f</span>, <span class="number">1.5f</span>);</span><br><span class="line">ScaleAnimation(<span class="keyword">float</span> fromX, <span class="keyword">float</span> toX, <span class="keyword">float</span> fromY, <span class="keyword">float</span> toY, <span class="keyword">float</span> pivotX, <span class="keyword">float</span> pivotY)</span><br><span class="line"><span class="keyword">new</span> ScaleAnimation(<span class="number">1.0f</span>, <span class="number">1.5f</span>, <span class="number">1.0f</span>, <span class="number">1.5f</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">ScaleAnimation(<span class="keyword">float</span> fromX, <span class="keyword">float</span> toX, <span class="keyword">float</span> fromY, <span class="keyword">float</span> toY, <span class="keyword">int</span> pivotXType, <span class="keyword">float</span> pivotXValue, <span class="keyword">int</span> pivotYType, <span class="keyword">float</span> pivotYValue)</span><br><span class="line"><span class="keyword">new</span> ScaleAnimation(<span class="number">1.0f</span>, <span class="number">1.5f</span>, <span class="number">1.0f</span>, <span class="number">1.5f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>); <span class="comment">//以中心点为基点</span></span><br></pre></td></tr></table></figure>
<p>XML配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">scale</span></span><br><span class="line">        <span class="attribute">android:fromXScale</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:toXScale</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:fromYScale</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:toYScale</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"float"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="TranslateAnimation_位移">TranslateAnimation 位移</h3><p>平移支持x轴平移起点和y轴平移起点，以及设置结束点。同时每个点都可以设置type，type和上面缩放动画的基点类型一样,默认类型是ABSOLUTE.</p>
<p>有以下几个构造函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TranslateAnimation(Context context, AttributeSet attrs)</span><br><span class="line">TranslateAnimation(<span class="keyword">float</span> fromXDelta, <span class="keyword">float</span> toXDelta, <span class="keyword">float</span> fromYDelta, <span class="keyword">float</span> toYDelta)</span><br><span class="line">TranslateAnimation(<span class="keyword">int</span> fromXType, <span class="keyword">float</span> fromXValue, <span class="keyword">int</span> toXType, <span class="keyword">float</span> toXValue, <span class="keyword">int</span> fromYType, <span class="keyword">float</span> fromYValue, <span class="keyword">int</span> toYType, <span class="keyword">float</span> toYValue)</span><br></pre></td></tr></table></figure>
<p>XML配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">translate</span></span><br><span class="line">        <span class="attribute">android:fromXDelta</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:toXDelta</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:fromYDelta</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:toYDelta</span>=<span class="value">"float"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="RoatationAnimation_旋转">RoatationAnimation 旋转</h3><p>旋转支持设置旋转开始角度，和旋转结束角度，以及旋转基点，和旋转基点类型。类型同上面一样,默认旋转基点是（0，0），默认类型同上面一样，也不多说了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RotateAnimation(Context context, AttributeSet attrs)</span><br><span class="line">RotateAnimation(<span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees)</span><br><span class="line">RotateAnimation(<span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees, <span class="keyword">float</span> pivotX, <span class="keyword">float</span> pivotY)</span><br><span class="line">RotateAnimation(<span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees, <span class="keyword">int</span> pivotXType, <span class="keyword">float</span> pivotXValue, <span class="keyword">int</span> pivotYType, <span class="keyword">float</span> pivotYValue)</span><br></pre></td></tr></table></figure>
<p>XML配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">rotate</span></span><br><span class="line">        <span class="attribute">android:fromDegrees</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:toDegrees</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"float"</span></span><br><span class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"float"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="AnimationSet_动画集合">AnimationSet 动画集合</h3><p>动画集合就是可以让多个动画一起运行，或者依次运行。</p>
<p>通过<code>addAnimation(Animation a)</code>向集合中添加动画，使用子动画的<code>setStartOffset(long offset)</code>设置延时，从而实现子动画之间的间隔。可以设置是否共享时间插值器。</p>
<p>xml配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">set</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里写子动画--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">rotation</span> <span class="attribute">....</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">alpha</span> <span class="attribute">.....</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>属性动画(Property Animation)</p>
<h3 id="Animation">Animation</h3><p>单独把Animation拿出来说，是因为前面几个都是Animation,他们有一些属性都是从父类继承的。包括时常，插值器，是否重复，监听器等。</p>
<p>setFillBefore(boolean)和setFillAfter(boolean)分别是动画开始前和动画结束后是否保持动画状态，默认前者为ture，后者为false;</p>
<p>xml中可以配置的属性（这些在前面几个动画中省略了，也是可以使用的）：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android:detachWallpaper</span><br><span class="line">android:duration</span><br><span class="line">android:fillAfter</span><br><span class="line">android:fillBefore</span><br><span class="line">android:fillEnabled</span><br><span class="line">android:interpolator</span><br><span class="line">android:repeatCount</span><br><span class="line">android:repeatMode   INFINTE(无限期)，RESTART（重新开始，默认值）</span><br><span class="line">android:startOffset</span><br><span class="line">android:zAdjustment   ZORDER_BOTTOM,ZORDER_NORMAL, ZORDER_TOP</span><br></pre></td></tr></table></figure>
<h4 id="启动动画：">启动动画：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">view.startAnimation(animation);</span><br><span class="line"><span class="comment">//或者这样</span></span><br><span class="line">view.setAnimation(animation);</span><br><span class="line">animation.start();</span><br></pre></td></tr></table></figure>
<h3 id="Interpolator_插值器">Interpolator 插值器</h3><p>通过设置插值器可以改变动画的速度，以及最终效果。<br>android sdk提供了几种默认插值器，而且这些插值器在新的protery animation上仍然可以使用，这个后面再说。</p>
<ul>
<li>AccelerateDecelerateInterpolator 先加速后减速</li>
<li>AccelerateInterpolator 加速</li>
<li>AnticipateInterPolator </li>
<li>AnticipateOvershootInterpolator</li>
<li>BounceInterpolator</li>
<li>CycleInterpolator</li>
<li>LinearInterpolator</li>
<li>OvershootInterpolator</li>
<li>PathInterpolator</li>
</ul>
<p>当然，我们也可以自定义Interpolator,一般开始值为0，结束值为1.0，然后根据算法来改变值。</p>
<h3 id="动画原理解析">动画原理解析</h3><p>动画就是根据间隔时间，不停的去刷新界面，把时间分片，在那个时间片，通过传入插值器的值到Animation.applyTransformation（），来计算当前的值（比如旋转角度值，透明度等）.</p>
<p>因此，我们也可以继承Animation,从写applyTransformation()来实现我们的其他的动画。</p>
<h3 id="其他">其他</h3><p>使用view动画时，如果需要用到类似基点类型和基点设置的，一定要注意设置对点，不然效果恨不如意。</p>
<p>另外，view动画，若动画前view在a点，动画过程以及动画后，view变化了位置，则点击点仍然在原位置，这是个大问题，特别需要注意。</p>
<p>在android apidemo中，有动画的使用，以及自定义动画，各种插值器效果，各位可以查看，我已经将其放到github上面了,地址：<a href="https://github.com/sangmingming/Android-ApiDemos" target="_blank" rel="external">https://github.com/sangmingming/Android-ApiDemos</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/02/01/android-view-animation/">http://blog.isming.me/2015/02/01/android-view-animation/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>视图动画（View Animation）,又称补间动画（Tween Animation）,即给出两个关键帧，通过一些算法将给定属性值在给定的时间内在两个关键帧间渐变。本文首先讲解各种基本动画的使用，其实介绍View动画的工作过程。</p>
<h3 id="概述">概述</h3><p>视图动画只能作用于View对象，是对View的变换，默认支持的类型有：</p>
<ul>
<li>透明度变化(AlphaAnimation)</li>
<li>缩放(ScaleAnimation)</li>
<li>位移(TranslateAnimation)</li>
<li>旋转(RotateAnimation)</li>
</ul>
<p>可以使用AnimationSet让多个动画集合在一起运行，使用插值器(Interpolator)设置动画的速度。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="animation" scheme="http://blog.isming.me/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android动画-Frame Animation]]></title>
    <link href="http://blog.isming.me/2015/01/28/android-frame-animation/"/>
    <id>http://blog.isming.me/2015/01/28/android-frame-animation/</id>
    <published>2015-01-28T12:13:47.000Z</published>
    <updated>2015-01-28T12:17:03.000Z</updated>
    <content type="html"><![CDATA[<p>动画可以在视觉上增加程序的流畅度，我之前对于动画这一块，是会用，但是不全面，这里写下博客，全面梳理一下Android动画方面的知识。当然，关于动画这块，也有很多前人写了很多内容，大家可以去参考。</p>
<p>3.0以前，android支持两种动画模式，<em>Tween Animation</em>,<em>Frame Animation</em>，在android3.0中又引入了一个新的动画系统：<em>Property Animation</em>，这三种动画模式在SDK中被称为<em>Property Animation</em>,<em>View Animation</em>,<em>Drawable Animation</em>。 可通过<a href="http://nineoldandroids.com/" target="_blank" rel="external">NineOldAndroids</a>项目在3.0之前的系统中使用Property Animation。另外呢，还有activity之间的过渡动画，android5.0增加的矢量动画，过渡效果等。</p>
<p>本文首先来说Frame Animation.</p>
<a id="more"></a>
<p>帧动画,在android中又称Drawable Animation，就是通过一系列的Drawable依次显示来达到模拟动画的效果。<br>android中提供了<code>AnimationDrawable</code>类来实现帧动画，我们可以使用AnimationDrawable作为View的背景。我们通常可以使用xml来配置动画。</p>
<h4 id="在项目的res/drawable/目录下面创建一个xml文件。">在项目的res/drawable/目录下面创建一个xml文件。</h4><h4 id="文件中以&lt;animation-list&gt;作为根节点，_每一张图片作为一个&lt;item&gt;。">文件中以<code>&lt;animation-list&gt;</code>作为根节点， 每一张图片作为一个<code>&lt;item&gt;</code>。</h4><p>如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">animation-list</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:oneshot</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/rocket_thrust1"</span> <span class="attribute">android:duration</span>=<span class="value">"200"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/rocket_thrust2"</span> <span class="attribute">android:duration</span>=<span class="value">"200"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/rocket_thrust3"</span> <span class="attribute">android:duration</span>=<span class="value">"200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>onshot</code>若为<code>true</code>，则动画只播放一次，否则动画会循环播放。item中的duration用于设置当前帧的停留时间。</p>
<h4 id="在代码中获取并，启动动画。">在代码中获取并，启动动画。</h4><p>如上面的xml文件为rocket_thrust.xml，则在代码中使用如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">AnimationDrawable rocketAnimation;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">  ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);</span><br><span class="line">  rocketImage.setBackgroundResource(R.drawable.rocket_thrust);</span><br><span class="line">  rocketAnimation = (AnimationDrawable) rocketImage.getBackground();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">    rocketAnimation.start();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码具体就是首先从资源中获取到我们的动画，然后设置为view的背景，之后启动动画。</p>
<p><em>需要注意的是，动画的启动需要在view和window建立连接后才可以绘制，比如上面代码是在用户触摸后启动。如果我们需要打开界面就启动动画的话，则可以在Activity的<code>onWindowFocusChanged()</code>方法中启动。</em></p>
<p>上面介绍的是在xml中定义动画，当然也可以在java代码中定义动画。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">AnimationDrawable rocketAnimation;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">  ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);</span><br><span class="line"> </span><br><span class="line">  rocketAnimation = <span class="keyword">new</span> AnimationDrawable();</span><br><span class="line">  rocketAnimation.addFrame(getResources().getDrawable(R.drawable.rocket_thrust1, <span class="number">200</span>);</span><br><span class="line">  rocketAnimation.addFrame(getResources().getDrawable(R.drawable.rocket_thrust2, <span class="number">200</span>);</span><br><span class="line">  rocketAnimation.addFrame(getResources().getDrawable(R.drawable.rocket_thrust3, <span class="number">200</span>);</span><br><span class="line">rocketImage.setBackground(rocketAnimation);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">    rocketAnimation.start();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多使用方法，可以去查看AnimationDrawable的api手册.</p>
<p>另外，看了一下相关代码，AnimationDrawable代码不长，其父类是<code>DrawableContainer</code>，用于保存Drawable list，另外有一个数组保存每一帧的停顿时间。每隔一定时间，替换Drawable,重新刷新，实现动画。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/01/28/android-frame-animation/">http://blog.isming.me/2015/01/28/android-frame-animation/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>动画可以在视觉上增加程序的流畅度，我之前对于动画这一块，是会用，但是不全面，这里写下博客，全面梳理一下Android动画方面的知识。当然，关于动画这块，也有很多前人写了很多内容，大家可以去参考。</p>
<p>3.0以前，android支持两种动画模式，<em>Tween Animation</em>,<em>Frame Animation</em>，在android3.0中又引入了一个新的动画系统：<em>Property Animation</em>，这三种动画模式在SDK中被称为<em>Property Animation</em>,<em>View Animation</em>,<em>Drawable Animation</em>。 可通过<a href="http://nineoldandroids.com/">NineOldAndroids</a>项目在3.0之前的系统中使用Property Animation。另外呢，还有activity之间的过渡动画，android5.0增加的矢量动画，过渡效果等。</p>
<p>本文首先来说Frame Animation.</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="animation" scheme="http://blog.isming.me/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android反编译-如何防止反编译]]></title>
    <link href="http://blog.isming.me/2015/01/18/android-anti-decompile/"/>
    <id>http://blog.isming.me/2015/01/18/android-anti-decompile/</id>
    <published>2015-01-17T17:35:53.000Z</published>
    <updated>2015-01-17T16:47:51.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>前面介绍了怎样去反编译别人的代码。哈哈，这里居然又写进行防止反编译。但是，还是先来写写吧。</p>
<h3 id="使用ProGuard">使用ProGuard</h3><p>proguard android的sdk中就有提供，使用它可以对代码进行混淆和精简，处理后的代码，虽然仍然可以反编译，但是阅读起来相当困难，降低代码的可读性。操作简单，推荐使用。</p>
<a id="more"></a>
<p>proguard使用方法和配置，可以看我之前的博客： <a href="http://blog.isming.me/2014/05/31/use-proguard/">http://blog.isming.me/2014/05/31/use-proguard/</a></p>
<p>另外网上有别人共享的proguard配置模板，也可以参考： <a href="https://github.com/krschultz/android-proguard-snippets" target="_blank" rel="external">https://github.com/krschultz/android-proguard-snippets</a></p>
<p>如果大家有去proguard的官网，ProGuard的公司提供的DexGuard可以给android程序提供更多的优化和保护，不过这个软件收费的，有需要的也可以去了解以下（我不是广告，(^_^））。</p>
<h3 id="代码转移到native">代码转移到native</h3><p>代码放在native层的话，使用我前面的方法就没办法去反编译了，这时就需要借助反编译c的方法了，这个我没有研究过了。</p>
<p>因此写在native层也是很安全的，但是因为native更难写，只建议偏重于专利，或者机密数据，等一些功能和逻辑写在native层。更加安全，也更快速。</p>
<h3 id="使用第三方加密工具">使用第三方加密工具</h3><p>国内现在也出现了很多apk加固工具，比如爱加密，梆梆加密等等。这些没有去使用过，但是看过网上的介绍，以及他们的自己的介绍，大致了解到，是在我们的apk之外加壳，对我们的dex文件进行加密来做的。</p>
<p>使用这些工具可以来帮助提高软件的安全性，但是使用之前也要确保服务的可靠性，服务商的信誉。</p>
<h3 id="个人之见">个人之见</h3><p>以上只是本人想到的几种，比较可行的方案。同时肯定还有其他的方式，比如采用签名验证，插件开发等等机制。</p>
<p>在我看来，软件的一定程度的混淆是有必要的，毕竟这个一个公司的财产（很多公司靠一个app营收），不过一些不是很特有的东西也是可以开源的。毕竟，现在网上的开源项目很多，我们也从中使用，借鉴了很多，也要回馈开源社区才行</p>
<p>文章系本人拙见，如果这方面你有什么好的方法，或者有什么好的建议，也可以评论交流。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/01/18/android-anti-decompile/">http://blog.isming.me/2015/01/18/android-anti-decompile/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>前面介绍了怎样去反编译别人的代码。哈哈，这里居然又写进行防止反编译。但是，还是先来写写吧。</p>
<h3 id="使用ProGuard">使用ProGuard</h3><p>proguard android的sdk中就有提供，使用它可以对代码进行混淆和精简，处理后的代码，虽然仍然可以反编译，但是阅读起来相当困难，降低代码的可读性。操作简单，推荐使用。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="decompile" scheme="http://blog.isming.me/tags/decompile/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android反编译-smali语法]]></title>
    <link href="http://blog.isming.me/2015/01/14/android-decompile-smali/"/>
    <id>http://blog.isming.me/2015/01/14/android-decompile-smali/</id>
    <published>2015-01-14T15:52:44.000Z</published>
    <updated>2015-01-14T15:57:34.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>前面我们有说过android反编译的工具，如何进行反编译。反编译后可以得到jar或者得到smali文件。Android采用的是java语言进行开发，但是Android系统有自己的虚拟机Dalvik,代码编译最终不是采用的java的class，而是使用的smali。我们反编译得到的代码，jar的话可能很多地方无法正确的解释出来，如果我们反编译的是smali则可以正确的理解程序的意思。因此，我们有必要熟悉smali语法。</p>
<h3 id="类型的表示">类型的表示</h3><p>java里面包含两种类型，原始类型和引用类型(包括对象)，同时映射到smali也是有这两大类型。</p>
<a id="more"></a>
<h5 id="原始类型">原始类型</h5><blockquote>
<p>V void (只能用于返回值类型)<br>Z boolean<br>B byte<br>S short<br>C char<br>I int<br>J long<br>F float<br>D Double</p>
</blockquote>
<h5 id="对象类型">对象类型</h5><blockquote>
<p>Lpackage/name/ObjectName; 相当于java中的package.name.ObjectName        </p>
</blockquote>
<p><em>L</em> 表示这是一个对象类型<br><em>package/name</em> 该对象所在的包<br><em>ObjectName</em> 对象名称<br><em>;</em> 标识对象名称的结束        </p>
<h5 id="数组的表示">数组的表示</h5><p><em>[I</em> 表示一个int型的一维数组，相当于int[]；<br>增加一个维度增加一个<em>[</em>,如<em>[[I</em>表示<em>int[][]</em></p>
<p>数组每一个维度最多<em>255</em>个;</p>
<p>对象数组表示也是类似，如String数组的表示是<em>[Ljava/lang/String</em>    </p>
<h3 id="寄存器与变量">寄存器与变量</h3><p>java中变量都是存放在内存中的，android为了提高性能，变量都是存放在寄存器中的，寄存器为32位，可以支持任何类型，其中long和double是64为的，需要使用两个寄存器保存。</p>
<p>寄存器采用v和p来命名<br>v表示本地寄存器，p表示参数寄存器，关系如下</p>
<p>如果一个方法有两个本地变量，有三个参数</p>
<blockquote>
<p>v0     第一个本地寄存器<br>v1        第二个本地寄存器<br>v2    p0     (this)<br>v3    p1    第一个参数<br>v4     p2    第二个参数<br>v5    p3    第三个参数</p>
</blockquote>
<p>当然，如果是静态方法的话就只有5个寄存器了，不需要存this了。</p>
<p>.registers 使用这个指令指定方法中寄存器的总数<br>.locals 使用这个指定表明方法中非参寄存器的总数，放在方法的第一行。</p>
<h3 id="方法和字段的表示">方法和字段的表示</h3><h5 id="方法签名">方法签名</h5><p>methodName(III)Lpackage/name/ObjectName;    </p>
<p>如果做过ndk开发的对于这样的签名应该很熟悉的，就是这样来标识一个方法的。<br>上面methodName标识方法名，III表示三个整形参数，Lpackage/name/ObjectName;表示返回值的类型。</p>
<h5 id="方法的表示">方法的表示</h5><p>Lpackage/name/ObjectName;——&gt;methodName(III)Z<br>即 package.name.ObjectName中的 function boolean methondName(int a, int b, int c) 类似这样子</p>
<h5 id="字段的表示">字段的表示</h5><p>Lpackage/name/ObjectName;——&gt;FieldName:Ljava/lang/String;</p>
<p>即表示： 包名，字段名和各字段类型</p>
<h4 id="方法的定义">方法的定义</h4><p>比如我下面的一个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用编译后是这样</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> private</span><span class="keyword"> static</span><span class="function"> sum(</span>II<span class="function">)</span>I</span><br><span class="line"><span class="keyword">    .locals</span> 4   <span class="comment">#表示需要申请4个本地寄存器</span></span><br><span class="line"><span class="keyword">    .parameter</span></span><br><span class="line"><span class="keyword">    .parameter</span> <span class="comment">#这里表示有两个参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 27 </span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">p0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v0</span>, a:I</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v1</span>, <span class="variable">p1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v1</span>, b:I</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v2</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v3</span>, <span class="variable">v1</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> add-int/2addr </span><span class="variable">v2</span>, <span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">v2</span><span class="keyword"></span><br><span class="line"></span><br><span class="line">    .end local</span> <span class="variable">v0</span>           <span class="comment">#a:I</span></span><br><span class="line">   <span class="instruction"> return </span><span class="variable">v0</span><span class="keyword"></span><br><span class="line">.end method</span></span><br></pre></td></tr></table></figure>
<p>从上面可以看到函数声明使用<em>.method</em>开始 <em>.end method</em>结束，java中的关键词private,static 等都可以使用，同时使用签名来表示唯一的方法，这里是<em>sum(II)I</em>。</p>
<h4 id="声明成员">声明成员</h4><p>.field private name:Lpackage/name/ObjectName;<br>比如：private TextView mTextView;表示就是<br>.field private mTextView:Landroid/widget/TextView;<br>private int mCount;<br>.field private mCount:I        </p>
<h3 id="指令执行">指令执行</h3><p>smali字节码是类似于汇编的，如果你有汇编基础，理解起来是非常容易的。</p>
<p>比如：<br>move v0, v3 #把v3寄存器的值移动到寄存器v0上.</p>
<p>const v0， 0x1 #把值0x1赋值到寄存器v0上。</p>
<p>invoke-static {v4, v5}, Lme/isming/myapplication/MainActivity;-&gt;sum(II)I   #执行方法sum(),v4,v5的值分别作为sum的参数。</p>
<h3 id="其他">其他</h3><p>通过前面我们可以看到，smali就是类似汇编，其中很多命令，我们可以去查它的手册来一一对应。学习时，我们可以自己写一个比较简单的java文件，然后转成smali文件来对照学习。</p>
<p>下面，我贴一个我写的一个比较简单的java文件以及其对应的smali，其中包含if判断和for循环。</p>
<p>java文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.isming.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView mTextView;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mTextView = (TextView) findViewById(R.id.text);</span><br><span class="line"></span><br><span class="line">        mTextView.setText(<span class="string">"a+b="</span> + sum(<span class="number">1</span>,<span class="number">2</span>) + <span class="string">"a&gt;b?"</span> + max(<span class="number">1</span>,<span class="number">2</span>) + <span class="string">"5 accumulate:"</span> + accumulate(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">accumulate</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a; i++) &#123;</span><br><span class="line">            sum += a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对应的smali:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lme/isming/myapplication/MainActivity;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Landroid/support/v7/app/ActionBarActivity;</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">"MainActivity.java"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># instance fields</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span> mTextView:<span class="class">Landroid/widget/TextView;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># direct methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span><span class="function"> &lt;init&gt;(</span><span class="function">)</span>V</span><br><span class="line"><span class="keyword">    .locals</span> 2</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 10</span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v0</span>, <span class="variable">p0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v0</span>, this:<span class="class">Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v1</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-direct </span>&#123;<span class="variable">v1</span>&#125;, <span class="class">Landroid/support/v7/app/ActionBarActivity;</span><span class="function">-&gt;&lt;init&gt;(</span><span class="function">)</span>V</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> return-void</span><br><span class="line"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> private</span><span class="function"> accumulate(</span>I<span class="function">)</span>I</span><br><span class="line"><span class="keyword">    .locals</span> 6</span><br><span class="line"><span class="keyword">    .parameter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 39</span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v0</span>, <span class="variable">p0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v0</span>, this:<span class="class">Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v1</span>, <span class="variable">p1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v1</span>, a:I</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v4</span>, <span class="variable">v1</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> if-gtz </span><span class="variable">v4</span>,<span class="keyword"> :cond_0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 40</span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v4</span>, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">v4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 46<span class="keyword"></span><br><span class="line">    .end local</span> <span class="variable">v0</span>           <span class="comment">#this:Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="keyword"> :goto_0</span></span><br><span class="line">   <span class="instruction"> return </span><span class="variable">v0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 42</span><br><span class="line"><span class="keyword">    .restart</span> local <span class="variable">v0</span>       <span class="comment">#this:Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="keyword"> :cond_0</span></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v4</span>, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v2</span>, <span class="variable">v4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 43</span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v2</span>, sum:I</span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v4</span>, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v3</span>, <span class="variable">v4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v3</span>, i:I</span><br><span class="line">   <span class="keyword"> :goto_1</span></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v4</span>, <span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v5</span>, <span class="variable">v1</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> if-gt </span><span class="variable">v4</span>, <span class="variable">v5</span>,<span class="keyword"> :cond_1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 44</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v4</span>, <span class="variable">v2</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v5</span>, <span class="variable">v1</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> add-int/2addr </span><span class="variable">v4</span>, <span class="variable">v5</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v2</span>, <span class="variable">v4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 43</span><br><span class="line">   <span class="instruction"> add-int/lit8 </span><span class="variable">v3</span>, <span class="variable">v3</span>, 0x1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> goto </span>:goto_1</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 46</span><br><span class="line">   <span class="keyword"> :cond_1</span></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v4</span>, <span class="variable">v2</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">v4</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> goto </span>:goto_0<span class="keyword"></span><br><span class="line">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> private</span><span class="function"> max(</span>II<span class="function">)</span>Z</span><br><span class="line"><span class="keyword">    .locals</span> 5</span><br><span class="line"><span class="keyword">    .parameter</span></span><br><span class="line"><span class="keyword">    .parameter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 31</span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v0</span>, <span class="variable">p0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v0</span>, this:<span class="class">Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v1</span>, <span class="variable">p1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v1</span>, a:I</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v2</span>, <span class="variable">p2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v2</span>, b:I</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v3</span>, <span class="variable">v1</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v4</span>, <span class="variable">v2</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> if-le </span><span class="variable">v3</span>, <span class="variable">v4</span>,<span class="keyword"> :cond_0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 32</span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v3</span>, 0x1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">v3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 34<span class="keyword"></span><br><span class="line">    .end local</span> <span class="variable">v0</span>           <span class="comment">#this:Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="keyword"> :goto_0</span></span><br><span class="line">   <span class="instruction"> return </span><span class="variable">v0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .restart</span> local <span class="variable">v0</span>       <span class="comment">#this:Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="keyword"> :cond_0</span></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v3</span>, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> goto </span>:goto_0<span class="keyword"></span><br><span class="line">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> private</span><span class="keyword"> static</span><span class="function"> sum(</span>II<span class="function">)</span>I</span><br><span class="line"><span class="keyword">    .locals</span> 4</span><br><span class="line"><span class="keyword">    .parameter</span></span><br><span class="line"><span class="keyword">    .parameter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 27</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">p0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v0</span>, a:I</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v1</span>, <span class="variable">p1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v1</span>, b:I</span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v2</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v3</span>, <span class="variable">v1</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> add-int/2addr </span><span class="variable">v2</span>, <span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move </span><span class="variable">v0</span>, <span class="variable">v2</span><span class="keyword"></span><br><span class="line"></span><br><span class="line">    .end local</span> <span class="variable">v0</span>           <span class="comment">#a:I</span></span><br><span class="line">   <span class="instruction"> return </span><span class="variable">v0</span><span class="keyword"></span><br><span class="line">.end method</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> protected</span><span class="function"> onCreate(</span><span class="class">Landroid/os/Bundle;</span><span class="function">)</span>V</span><br><span class="line"><span class="keyword">    .locals</span> 8</span><br><span class="line"><span class="keyword">    .parameter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 16</span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v0</span>, <span class="variable">p0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v0</span>, this:<span class="class">Lme/isming/myapplication/MainActivity;</span></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v1</span>, <span class="variable">p1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .local</span> <span class="variable">v1</span>, savedInstanceState:<span class="class">Landroid/os/Bundle;</span></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v2</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v3</span>, <span class="variable">v1</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-super </span>&#123;<span class="variable">v2</span>, <span class="variable">v3</span>&#125;, <span class="class">Landroid/support/v7/app/ActionBarActivity;</span><span class="function">-&gt;onCreate(</span><span class="class">Landroid/os/Bundle;</span><span class="function">)</span>V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 17</span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v2</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const </span><span class="variable">v3</span>, 0x7f030017</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v2</span>, <span class="variable">v3</span>&#125;, <span class="class">Lme/isming/myapplication/MainActivity;</span><span class="function">-&gt;setContentView(</span>I<span class="function">)</span>V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 19</span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v2</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v3</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const </span><span class="variable">v4</span>, 0x7f08003f</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>, <span class="variable">v4</span>&#125;, <span class="class">Lme/isming/myapplication/MainActivity;</span><span class="function">-&gt;findViewById(</span>I<span class="function">)</span><span class="class">Landroid/view/View;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> check-cast </span><span class="variable">v3</span>, <span class="class">Landroid/widget/TextView;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> iput-object </span><span class="variable">v3</span>, <span class="variable">v2</span>, <span class="class">Lme/isming/myapplication/MainActivity;</span>-&gt;mTextView:<span class="class">Landroid/widget/TextView;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 21</span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v2</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> iget-object </span><span class="variable">v2</span>, <span class="variable">v2</span>, <span class="class">Lme/isming/myapplication/MainActivity;</span>-&gt;mTextView:<span class="class">Landroid/widget/TextView;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> new-instance </span><span class="variable">v3</span>, <span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v7</span>, <span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v3</span>, <span class="variable">v7</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v4</span>, <span class="variable">v7</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-direct </span>&#123;<span class="variable">v4</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;&lt;init&gt;(</span><span class="function">)</span>V</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const-string </span><span class="variable">v4</span>, <span class="string">"a+b="</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>, <span class="variable">v4</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;append(</span><span class="class">Ljava/lang/String;</span><span class="function">)</span><span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v4</span>, 0x1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v5</span>, 0x2</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-static </span>&#123;<span class="variable">v4</span>, <span class="variable">v5</span>&#125;, <span class="class">Lme/isming/myapplication/MainActivity;</span><span class="function">-&gt;sum(</span>II<span class="function">)</span>I</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result </span><span class="variable">v4</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>, <span class="variable">v4</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;append(</span>I<span class="function">)</span><span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const-string </span><span class="variable">v4</span>, <span class="string">"a&gt;b?"</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>, <span class="variable">v4</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;append(</span><span class="class">Ljava/lang/String;</span><span class="function">)</span><span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v4</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v5</span>, 0x1</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v6</span>, 0x2</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-direct </span>&#123;<span class="variable">v4</span>, <span class="variable">v5</span>, <span class="variable">v6</span>&#125;, <span class="class">Lme/isming/myapplication/MainActivity;</span><span class="function">-&gt;max(</span>II<span class="function">)</span>Z</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result </span><span class="variable">v4</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>, <span class="variable">v4</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;append(</span>Z<span class="function">)</span><span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const-string </span><span class="variable">v4</span>, <span class="string">"5 accumulate:"</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>, <span class="variable">v4</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;append(</span><span class="class">Ljava/lang/String;</span><span class="function">)</span><span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-object </span><span class="variable">v4</span>, <span class="variable">v0</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> const/4 </span><span class="variable">v5</span>, 0x5</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-direct </span>&#123;<span class="variable">v4</span>, <span class="variable">v5</span>&#125;, <span class="class">Lme/isming/myapplication/MainActivity;</span><span class="function">-&gt;accumulate(</span>I<span class="function">)</span>I</span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result </span><span class="variable">v4</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>, <span class="variable">v4</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;append(</span>I<span class="function">)</span><span class="class">Ljava/lang/StringBuilder;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v3</span>&#125;, <span class="class">Ljava/lang/StringBuilder;</span><span class="function">-&gt;toString(</span><span class="function">)</span><span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> move-result-object </span><span class="variable">v3</span></span><br><span class="line"></span><br><span class="line">   <span class="instruction"> invoke-virtual </span>&#123;<span class="variable">v2</span>, <span class="variable">v3</span>&#125;, <span class="class">Landroid/widget/TextView;</span><span class="function">-&gt;setText(</span><span class="class">Ljava/lang/CharSequence;</span><span class="function">)</span>V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 23</span><br><span class="line">   <span class="instruction"> return-void</span><br><span class="line"></span><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>
<h3 id="参考资料">参考资料</h3><p>最后附上一些参考资料：</p>
<p><a href="http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html" target="_blank" rel="external">http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html</a>    </p>
<p><a href="https://code.google.com/p/smali/w/list" target="_blank" rel="external">https://code.google.com/p/smali/w/list</a></p>
<p><a href="http://www.miui.com/thread-409543-1-1.html" target="_blank" rel="external">http://www.miui.com/thread-409543-1-1.html</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/01/14/android-decompile-smali/">http://blog.isming.me/2015/01/14/android-decompile-smali/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>前面我们有说过android反编译的工具，如何进行反编译。反编译后可以得到jar或者得到smali文件。Android采用的是java语言进行开发，但是Android系统有自己的虚拟机Dalvik,代码编译最终不是采用的java的class，而是使用的smali。我们反编译得到的代码，jar的话可能很多地方无法正确的解释出来，如果我们反编译的是smali则可以正确的理解程序的意思。因此，我们有必要熟悉smali语法。</p>
<h3 id="类型的表示">类型的表示</h3><p>java里面包含两种类型，原始类型和引用类型(包括对象)，同时映射到smali也是有这两大类型。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="decompile" scheme="http://blog.isming.me/tags/decompile/"/>
    
      <category term="smali" scheme="http://blog.isming.me/tags/smali/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android反编译-反编译工具和方法]]></title>
    <link href="http://blog.isming.me/2015/01/11/android-decompile-tools/"/>
    <id>http://blog.isming.me/2015/01/11/android-decompile-tools/</id>
    <published>2015-01-11T14:19:17.000Z</published>
    <updated>2015-01-14T15:54:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>开发过程中有些时候会遇到一些功能，自己不知道该怎么做，然而别的软件里面已经有了，这个时候可以采用反编译的方式，解开其他的程序，来了解一些它的做法，同时啊，还可以借鉴别人的软件结构，资源文件，等等，哈哈。那我就来讲解一些关于反编译相关的知识，主要分三篇，第一篇介绍反编译的工具和方法，第二篇，介绍smali的语法,第三篇介绍如何防止反编译，主要通过这几篇文章，了解如何去做反编译和代码加固。<br><a id="more"></a></p>
<h3 id="工具">工具</h3><h4 id="apktools-目前最强大的反编译工具">apktools-目前最强大的反编译工具</h4><p>轻松反编译apk，解析出资源文件，xml文件，生成smali文件，还可以把修改后的文件你想生成apk。</p>
<p>支持windows,linux,mac。 </p>
<p>下载地址:<a href="[https://code.google.com/p/android-apktool/downloads/list]">https://code.google.com/p/android-apktool/downloads/list</a> 请自备梯子</p>
<h4 id="dex2jar">dex2jar</h4><p>将apk中的dex文件转换成为jar文件，很多人不会看smali文件，还是看java类文件比较舒服，这个时候可以借助这个工具来转成java,也是支持windows,linux,mac。</p>
<p>下载地址：<a href="http://code.google.com/p/dex2jar/downloads/list" target="_blank" rel="external">http://code.google.com/p/dex2jar/downloads/list</a></p>
<h4 id="jd-gui">jd-gui</h4><p>查看jar文件,基本可以看到java class文件了，也是支持mac,windows,linux。</p>
<p>下载地址：<a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a></p>
<h4 id="apktool的命令行综合工具推荐_apktool_plus">apktool的命令行综合工具推荐 apktool plus</h4><p>其实是别人写的一个工具，集合了apktool的功能，另外还支持给apk签名。最新版本是v9update6，只支持windows系统。</p>
<p>下载地址：<a href="http://dl.dbank.com/c0jndlkbu4#" target="_blank" rel="external">http://dl.dbank.com/c0jndlkbu4#</a></p>
<h3 id="进行反编译">进行反编译</h3><h4 id="使用apktools">使用apktools</h4><p>在apktools目录下执行以下命令</p>
<blockquote>
<p>./apktool d pathtoapk outdir #mac linux<br>apktool.bat d pathtoapk outdir #window    </p>
</blockquote>
<p>这样就可以反编译成功了，可以查看其中的资源文件，smali文件，当然有的app进行了特殊处理，不是全部可以反编译的。</p>
<p>同时apktool还可以对反编译后的文件逆向成apk文件,格式如下。</p>
<blockquote>
<p>./apktool b apppath outpath</p>
</blockquote>
<p>逆向后的文件要是无签名的需要先签名才可以安装。</p>
<h4 id="使用dex2jar">使用dex2jar</h4><p>apk文件本身其实就是一个zip压缩包，先讲apk改成一个<em>.zip</em>文件解压后得到一个classes.dex。到dex2jar的目录，执行以下命令.</p>
<blockquote>
<p>./d2j-dex2jar.sh pathtoclasses.dex  #mac linux<br>d2j-dex2jar.bat pathtoclasses.dex #wind</p>
</blockquote>
<p>之后会生成一个jar文件，用jd-gui打开就可以看到其中的java代码了。</p>
<h3 id="其他">其他</h3><p>其实我们使用的反编译也就这些足够了，通常很多时候无法获取很多的代码，毕竟人家也有措施应对的。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/01/11/android-decompile-tools/">http://blog.isming.me/2015/01/11/android-decompile-tools/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>开发过程中有些时候会遇到一些功能，自己不知道该怎么做，然而别的软件里面已经有了，这个时候可以采用反编译的方式，解开其他的程序，来了解一些它的做法，同时啊，还可以借鉴别人的软件结构，资源文件，等等，哈哈。那我就来讲解一些关于反编译相关的知识，主要分三篇，第一篇介绍反编译的工具和方法，第二篇，介绍smali的语法,第三篇介绍如何防止反编译，主要通过这几篇文章，了解如何去做反编译和代码加固。<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="decompile" scheme="http://blog.isming.me/tags/decompile/"/>
    
      <category term="tools" scheme="http://blog.isming.me/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014年总结]]></title>
    <link href="http://blog.isming.me/2015/01/05/2014-review/"/>
    <id>http://blog.isming.me/2015/01/05/2014-review/</id>
    <published>2015-01-05T14:24:37.000Z</published>
    <updated>2015-03-18T06:05:45.000Z</updated>
    <content type="html"><![CDATA[<h3 id="14年总结">14年总结</h3><p>又一年开始，网上也流散着许多的年终总结，往年我也会写写，都是流水的回忆。前两日，与小波电话聊天，突然想到问他一四年用三个词总结是什么？得到的是失恋，毕业，工作。让我说说2014的三个词，竟然一时无从说起。这两日一直思考这个问题，毕竟这一年过的比较平淡。用三个关键词形容2014，就是”踏实”, “责任”和”收获”吧。</p>
<a id="more"></a>
<p>2014年对于我来说,是很平淡的一年，没有什么大的波折，一些都还比较顺。这一年很踏实，这一年读了很多书(可能是我目前为止读书最多的一年)，第一年开始认真用心的写博客，同时从广州转战上海，心里上也很踏实。</p>
<p>这一年奶奶去世了，家里还有几个老人，同时父母身体也不好，几次回家，都能感受到父母的担子。妹妹也来到上海开始新的学业，在这边也好有个照应。公司的项目，已经开始了基本单兵作战，要保证软件的质量，项目的工期。男子汉，要扛起责任。</p>
<p>收获，怎么说呢,收获很多，包括个人成长，爱情，友情等等。读书写博，技术上有很多的成长。分享自己的知识以及代码，被别人阅读以及star,收获网上的朋友，同时也鼓励自己继续坚持下去。转战上海，结束异地，同时也离家更近了。能够更多的时间在一起。</p>
<p>2014的最后应该还有一个词，”感谢”，感谢离开广州市，同事的教诲，冯佳的陪酒；感谢现在上级的知遇，同事的协助，小红书让我迈出了很多的第一次；感谢初到上海朋友的帮助，特别是袁义；感谢女友的包容，妹妹的谅解；感谢你的浏览😄😄。</p>
<h3 id="展望15">展望15</h3><p>其实上面的总结，在元旦那天已经发到QQ空间。不过，内容主要是对于14年的一些感想。仍然需要针对15年做一个规划，计划给自己一个执行的参照。主要是让自己能够在技术和知识的素养上有所提升，身体健康等能够提高。</p>
<h4 id="多读书">多读书</h4><p>相比之下，14年已经比以前任何一年读的书更多了，但是不够，需要读更多。暂时以下图书需要重读或者精读。</p>
<blockquote>
<p>重构改善既有代码的设计<br>java虚拟机设计规范<br>操作系统－精髓与设计原理<br>深入理解Android<br>设计模式<br>更多图书待补充    </p>
</blockquote>
<h4 id="知识深入">知识深入</h4><p>对于Android和Java要更深入，学习java虚拟机，操作系统原理，android系统底层虚拟机等。</p>
<h4 id="知识扩展">知识扩展</h4><p>学习Python，JavaScript，这两门语言其实已经会了一点，但是要学习，保证工作能够顺利使用，毕竟现在客户端开发都需要服务端的支持，同时客户端Hybird开发h5和Javascript很重要。同时后端的一些技术，比如mongodb数据库，nginx服务器等。</p>
<p>####　写博客</p>
<p>坚持写博客。<br>2015年主要开发写，android各种组件的详细使用，帮助自己整理梳理知识。写android和设计模式，主要深入熟悉设计模式，同时写自己在工作中遇到的问题，欢迎提意见。</p>
<h4 id="身体锻炼">身体锻炼</h4><p>锻炼身体，今年刚到上海的时候，坚持了没走两次，天冷后就不跑了，身体已经胖了不少。15年要多跑步，锻炼身体了。</p>
<h4 id="与人交流">与人交流</h4><p>多参加一些技术技术交流，多与朋友进行联系。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2015/01/05/2014-review/">http://blog.isming.me/2015/01/05/2014-review/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="14年总结">14年总结</h3><p>又一年开始，网上也流散着许多的年终总结，往年我也会写写，都是流水的回忆。前两日，与小波电话聊天，突然想到问他一四年用三个词总结是什么？得到的是失恋，毕业，工作。让我说说2014的三个词，竟然一时无从说起。这两日一直思考这个问题，毕竟这一年过的比较平淡。用三个关键词形容2014，就是”踏实”, “责任”和”收获”吧。</p>]]>
    
    </summary>
    
      <category term="乱弹" scheme="http://blog.isming.me/tags/%E4%B9%B1%E5%BC%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[导入开源库到基于Android Studio构建的项目中]]></title>
    <link href="http://blog.isming.me/2014/12/12/import-library-to-android-studio/"/>
    <id>http://blog.isming.me/2014/12/12/import-library-to-android-studio/</id>
    <published>2014-12-12T14:22:34.000Z</published>
    <updated>2014-12-17T01:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>前两天，谷歌发布了Android Studio 1.0的正式版，也有更多的人开始迁移到Android Studio进行开发。然而，网上很多的开源库,控件等还是以前的基于Eclipse进行开发，很多人不知道怎么导入到自己的基于Android Studio项目中来，微博上也有人私信我，让我来写写，正好今天回来的比较早，就写写吧。主要介绍一下常见的一些导包的场景。</p>
<a id="more"></a>
<h3 id="前言">前言</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--project   <span class="comment">//项目目录</span></span><br><span class="line">  |</span><br><span class="line">  build.gradle  <span class="comment">//项目的gradle配置文件</span></span><br><span class="line">  |</span><br><span class="line">  settings.gradle　／／gradle设置，会保存所有的module</span><br><span class="line">  |</span><br><span class="line">  app    <span class="comment">//module　目录</span></span><br><span class="line">  |__build.gradle　module的配置</span><br><span class="line">  |</span><br><span class="line">  module2  <span class="comment">//module2目录</span></span><br><span class="line">  |__build.gradle　module的配置</span><br></pre></td></tr></table></figure>
<p>同eclipse中的项目一样，gradle/android studio 构建也可以有module，将moudle放到项目目录下面,然后在settings.gradle中增加该module，最简单的方法是用文件夹名。比如我们上面的结构，build.gradle文件应该如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">':app'</span>, <span class="string">':module2'</span></span><br></pre></td></tr></table></figure></p>
<p>更多关于gralde的知识可以看我以前的文章:</p>
<p><a href="http://blog.isming.me/2014/11/21/use-gradle-new/">使用gradle构建android项目（续）</a><br><a href="http://blog.isming.me/2014/05/20/android4gradle/">使用Gradle构建Android项目</a></p>
<h3 id="导入Jar文件">导入Jar文件</h3><p>这种可能很常见，可以下载到别人搞好的jar包，这样可以直接在自己的主module下创建libs文件夹(我这里这样，只是为了兼容eclipse方式),然后把jar文件放进去,然后在module的<code>build.gradle</code>文件中的<code>dependecies{}</code>添加如下代码：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile files(<span class="string">'libs/name.jar'</span>)</span><br></pre></td></tr></table></figure></p>
<p>当libs文件夹下面有多个文件时，可以用一句代码包含这些包:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br></pre></td></tr></table></figure></p>
<p>当有文件不需要被包含时，可以这样:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">exclude:</span> [<span class="string">'android-support*.jar'</span>], <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br></pre></td></tr></table></figure></p>
<p>从上面的代码中可以看到我们可以使用通配符, <code>+</code>表示一个字符，<code>*</code>表示０到多个字符。</p>
<h3 id="导入maven中的库">导入maven中的库</h3><p>如果开源库作者有将代码放到Maven库中，我们可以在gradle配置中直接引入,类似如下:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.github.dmytrodanylyk.android-process-button:library:1.0.1'</span></span><br></pre></td></tr></table></figure></p>
<p>一般我们可以在开源库的github页面上面看有没有这样一个地址，或者到maven库中根据包名搜索有没有,我们前面这个引入的项目分三个部分 <em>group:name:version</em>，我们引入其他的包也有遵守这个规则。</p>
<h3 id="导入gradle构建的开源库">导入gradle构建的开源库</h3><p>这种情况的比较少用到，因为这张的开源库，作者一般都有放到maven库中，但是偶尔也会用到这里也提一下。</p>
<p>首先下载文件，将我们需要的这个库的module文件夹拷贝到我们的项目的目录下面，然后在setting.gradle文件中增加文件夹名称, 然后在我们需要依赖这个模块的module中的build.gradle文件中加入如下代码:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile project(<span class="string">':libmodule'</span>)</span><br></pre></td></tr></table></figure></p>
<p>这样就可以了。</p>
<h3 id="导入基于Eclipse构建的开源库">导入基于Eclipse构建的开源库</h3><p>基于Eclipse构建的项目，和基于Android Studio构建的项目的很大区别是目录结构不同。<br>我们首先将module文件夹拷贝到我们的项目目录下面，然后在settings.gradle文件中增加这个module，然后在要使用的module中的build.gradle文件中引入依赖，这样看的话，似乎和引入基于gradle构建的没什么不同。但是，基于Eclipse构建的项目中，没有build.gradle文件，所以我们需要自己新建一个放到module下面,下面是一个模版：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'android-library'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">19</span></span><br><span class="line">    buildToolsVersion <span class="string">"20.0.0"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">9</span></span><br><span class="line">        targetSdkVersion <span class="number">19</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">            java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            resources.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">            res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，根据各自的sdk和buildtools版本等等，以及其他，配置会有变化，可以看我之前的文章。</p>
<h4 id="其他">其他</h4><p>以上就是主要的集中导入场景，自己可以根据自己的实际情况然后改变配置等等。</p>
<p>另外,我们导入的仓库可能不是maven中心仓库，或者可能是我们自己搭建的仓库,我们可以自定义仓库地址的,修改build.gradle文件中的repositories就可以了，例如:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">"https://oss.sonatype.org/content/repositories/snapshots"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另外，project层的buildscript在module层也是会生效的，所以不用在每个module都配置。</p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2014/12/12/import-library-to-android-studio/">http://blog.isming.me/2014/12/12/import-library-to-android-studio/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>前两天，谷歌发布了Android Studio 1.0的正式版，也有更多的人开始迁移到Android Studio进行开发。然而，网上很多的开源库,控件等还是以前的基于Eclipse进行开发，很多人不知道怎么导入到自己的基于Android Studio项目中来，微博上也有人私信我，让我来写写，正好今天回来的比较早，就写写吧。主要介绍一下常见的一些导包的场景。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="android studio" scheme="http://blog.isming.me/tags/android-studio/"/>
    
      <category term="gradle" scheme="http://blog.isming.me/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用gradle构建android项目（续）]]></title>
    <link href="http://blog.isming.me/2014/11/21/use-gradle-new/"/>
    <id>http://blog.isming.me/2014/11/21/use-gradle-new/</id>
    <published>2014-11-21T14:09:44.000Z</published>
    <updated>2014-12-17T01:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>在几个月之前，我已经写过一篇使用gradle构建android项目的博客了<a href="http://blog.isming.me/2014/05/20/android4gradle/">http://blog.isming.me/2014/05/20/android4gradle/</a>,那篇文章已经介绍了如何使用gradle进行项目构建，以及为谷歌会推荐使用gradle。当时android的gradle插件是0.11.0,现在插件的版本已经是0.14.3了，对于一些老的方法和api，有一些已经被移除，无法使用。因此有必要再写一篇博客介绍这些被移除的部分和替代方案。同时由于个人学识原因，当时没有介绍的一些技巧，其他功能，也会在本文中进行介绍。</p>
<p><img src="http://isming.qiniudn.com/android_studio_new_splash.png" alt="android studio 最新闪屏"></p>
<a id="more"></a>
<h3 id="和上一篇文章相比不兼容的地方">和上一篇文章相比不兼容的地方</h3><p>没有看过我另一篇文章的，建议去看一下。</p>
<p>以下这些属性改名，原先的不能用:</p>
<blockquote>
<p>runProguard  -&gt;  minifyEnabled (是否混淆)<br>zipAlign     -&gt;  zipALignEnabled (是否zip对齐)<br>packageName  -&gt;  applicationId<br>jniDebugBuild-&gt;  jniDebuggable<br>renderscriptDebug-&gt;renderscriptDebuggable<br>renderscriptSupportMode-&gt;renderscriptSupportModeEnabled<br>renderscriptNdkMode-&gt;renderscriptNdkModeEnabled<br>Variant.packageApplication/zipAlign/createZipAlignTask/outputFile/processResources/processManifest使用variant.out代替，具体使用，看后面代码   </p>
</blockquote>
<p>这些被移除替换的，在最新版的gradle插件中，已经不会提示过时，直接报错，请警惕啊！！！！</p>
<h3 id="新功能">新功能</h3><h4 id="multiDexEnabled_多dex支持">multiDexEnabled 多dex支持</h4><h4 id="shrinkResources_移除未使用的资源">shrinkResources 移除未使用的资源</h4><h4 id="支持定义BuildConfig值和res的值,比如：">支持定义BuildConfig值和res的值,比如：</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.buildConfigField <span class="string">"int"</span>, <span class="string">"VALUE"</span>, <span class="string">"1"</span></span><br><span class="line">    variant.resValue <span class="string">"string"</span>, <span class="string">"name"</span>, <span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还可以在<code>defaultConfig</code>,<code>buildType</code>,<code>productFlavors</code>中定义,比如：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix <span class="string">".debug"</span></span><br><span class="line">            signingConfig signingConfigs.myConfig</span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"FOO"</span>, <span class="string">"\"bar1\""</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"FOO"</span>, <span class="string">"\"bar\""</span></span><br><span class="line"></span><br><span class="line">            resValue <span class="string">"string"</span>, <span class="string">"foo"</span>, <span class="string">"foo2"</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>通过这样，我们可以对我们生成的最终程序，进行多样划的定制了。</p>
<h4 id="Manifest文件内容占位符">Manifest文件内容占位符</h4><p>这样可以打包的时候，对Manifest进行自定义配置,使用方法:</p>
<ol>
<li><p>在Manifest文件中定义一个占位符，比如以我们之前写的umeng打包的例子为例，${UMENG_CHANNEL}，这种格式.</p>
</li>
<li><p>在gradle配置文件中加替换,可以在<code>defaultConfig</code>,<code>buildType</code>,<code>productFlavors</code>中配置，比如:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    manifestPlaceholders = [ <span class="string">UMENG_CHANNEL:</span><span class="string">"defaultName"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>同时，还可以直接在Manifest文件中加包名的替换，直接使用<code>${applicationId}</code>即可。</p>
<p>###　其他技巧免费附送</p>
<p>如果使用过程中经常出现OOM,那么在<code>gradle.properties</code>文件中增加一下内存，让gradle可以使用更多内存:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">如果因为中文问题，出现错误，最好在org.gradle.jvmargs后面再加上`-Dfile.encoding=UTF-8`,那么这个时候和在一起就是：</span><br><span class="line">```xml</span><br><span class="line">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>
<p>如果，因为一些错误，不得不终止，再进来之后，无法进行编译,去<code>projectpath/.gradle/&lt;gradle-version&gt;/taskArtifacts/</code>目录下看有没有<code>*.lock</code>的文件，删掉再重试。</p>
<h3 id="关于android_studio和gradle">关于android studio和gradle</h3><p>android studio（以下简称as）今天发布了1.0RC版，意味着正式版本的即将到来，同时在社区，QQ群也可以看到越来越多的人开始在使用android studio。经常也有很多人会问到升级的时候会遇到一些问题，主要原因就是android studio的一些大版本升级后，一般有一个推荐gradle插件的版本,比如,as0.9要求0.14.+版本，as0.8要求0.12+版本。两者是互相依赖的，gradle插件的版本同时对于as也有最低版本要求。这样，我们升级as后也必须修改gradle的配置文件，提高插件版本，同时一些不能向下兼容的配置也需要修改。</p>
<p>在升级gradle和插件版本后，一般都会重新下载gradle，这样会消耗你一点时间。</p>
<h3 id="最后，福利">最后，福利</h3><p>奉上我最近的妹子图的gradle配置:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:0.14.+'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.0"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">9</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">        versionCode <span class="number">3</span></span><br><span class="line">        versionName <span class="string">"1.1.1"</span></span><br><span class="line">        multiDexEnabled <span class="literal">false</span></span><br><span class="line">        manifestPlaceholders = [ <span class="string">UMENG_CHANNEL_VALUE:</span><span class="string">"default_channel"</span> ]</span><br><span class="line">        buildConfigField <span class="string">"boolean"</span>, <span class="string">"ISDEBUG"</span>, <span class="string">"true"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//签名</span></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">//storeFile file("/home/sam/.android/debug.keystore")</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你自己的keystore信息</span></span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">//storeFile file("/home/sam/sangmingming.keystore")</span></span><br><span class="line">            <span class="comment">//storePassword ""</span></span><br><span class="line">            <span class="comment">//keyAlias "sam"</span></span><br><span class="line">            <span class="comment">//keyPassword ""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line"></span><br><span class="line">        debug &#123;</span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"ISDEBUG"</span>, <span class="string">"true"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"ISDEBUG"</span>, <span class="string">"true"</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.txt'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//渠道Flavors，我这里写了一些常用的，你们自己改</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        <span class="comment">//GooglePlay&#123;&#125;</span></span><br><span class="line">        <span class="comment">//NDuo&#123;&#125;</span></span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        umeng &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_7</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123; flavor -&gt;</span><br><span class="line">        flavor.manifestPlaceholders = [ <span class="string">UMENG_CHANNEL_VALUE:</span>name ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    applicationVariants.all &#123; variant -&gt;</span><br><span class="line"></span><br><span class="line">        variant.outputs.each &#123; output -&gt;</span><br><span class="line">            <span class="keyword">def</span> outputFile = output.outputFile</span><br><span class="line">            <span class="keyword">if</span> (outputFile != <span class="literal">null</span> &amp;&amp; outputFile.name.endsWith(<span class="string">'.apk'</span>)) &#123;</span><br><span class="line">                <span class="keyword">def</span> fileName = outputFile.name.replace(<span class="string">".apk"</span>, <span class="string">"-$&#123;defaultConfig.versionName&#125;.apk"</span>)</span><br><span class="line">                output.outputFile = <span class="keyword">new</span> File(outputFile.parent, fileName)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:21.+'</span></span><br><span class="line">    compile <span class="string">'com.android.support:support-v4:21.+'</span></span><br><span class="line">    compile <span class="string">'com.android.support:cardview-v7:21.+'</span></span><br><span class="line">    compile <span class="string">'com.android.support:recyclerview-v7:21.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，我把谷歌最新的gradle配置的示例也拿回来了，分享给大家：<a href="http://isming.qiniudn.com/gradle-samples-0.14.4.zip" target="_blank" rel="external">点击下载</a></p>
<p>参考资料：<a href="http://tools.android.com/tech-docs/new-build-system" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2014/11/21/use-gradle-new/">http://blog.isming.me/2014/11/21/use-gradle-new/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>在几个月之前，我已经写过一篇使用gradle构建android项目的博客了<a href="http://blog.isming.me/2014/05/20/android4gradle/">http://blog.isming.me/2014/05/20/android4gradle/</a>,那篇文章已经介绍了如何使用gradle进行项目构建，以及为谷歌会推荐使用gradle。当时android的gradle插件是0.11.0,现在插件的版本已经是0.14.3了，对于一些老的方法和api，有一些已经被移除，无法使用。因此有必要再写一篇博客介绍这些被移除的部分和替代方案。同时由于个人学识原因，当时没有介绍的一些技巧，其他功能，也会在本文中进行介绍。</p>
<p><img src="http://isming.qiniudn.com/android_studio_new_splash.png" alt="android studio 最新闪屏"></p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="android studio" scheme="http://blog.isming.me/tags/android-studio/"/>
    
      <category term="gradle" scheme="http://blog.isming.me/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在低版本android系统上实现Material设计应用]]></title>
    <link href="http://blog.isming.me/2014/11/17/material-design-for-pre-lollipop-android/"/>
    <id>http://blog.isming.me/2014/11/17/material-design-for-pre-lollipop-android/</id>
    <published>2014-11-17T14:07:33.000Z</published>
    <updated>2014-12-17T01:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>​Material Design真的很好看，动画效果真的很实用。前面也写了一些文章介绍如何编写Material风格的程序，但是很多都是一些新的api，低版本上面没有这些api，我们没办法使用。但是不用气馁，google官方，以及一些大牛，给我们提供了一些程序，让我们在低版本上面可以实现Material风格的程序，这里就给大家介绍一下。</p>
<p><img src="http://isming.qiniudn.com/screenmeizitu.png" alt="妹子图截屏"></p>
<p>妹子图截屏</p>
<a id="more"></a>
<h3 id="使用support_library">使用support library</h3><p>使用support library最新的版本，appcomt21，可以在较低版本上面实现部分风格，在之前的文章我已经说过了，这里在系统的说一下。</p>
<p>####应用主题</p>
<p>这部分的话之前的文章说过，链接在这里: <a href="http://blog.isming.me/2014/10/18/creating-android-app-with-material-design-one-theme/">http://blog.isming.me/2014/10/18/creating-android-app-with-material-design-one-theme/</a></p>
<p>使用gralde进行构建的话，在依赖中添加v7包：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile <span class="string">'com.android.support:appcompat-v7:21.0.+'</span></span><br><span class="line">compile <span class="string">'com.android.support:cardview-v7:21.0.+'</span></span><br><span class="line">compile <span class="string">'com.android.support:recyclerview-v7:21.0.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用eclipse构建的话，加入最新的appcompat包即可。</p>
<p>另外在style文件中加入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- extend one of the Theme.AppCompat themes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"Theme.MyTheme"</span> <span class="attribute">parent</span>=<span class="value">"Theme.AppCompat.Light"</span>&gt;</span><span class="css"></span><br><span class="line">&lt;!<span class="tag">--</span> <span class="tag">customize</span> <span class="tag">the</span> <span class="tag">color</span> <span class="tag">palette</span> <span class="tag">--</span>&gt;</span><br><span class="line">&lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">colorPrimary</span>"&gt;<span class="at_rule">@<span class="keyword">color/material_blue_500&lt;/item&gt;</span></span><br><span class="line">&lt;item name=<span class="string">"colorPrimaryDark"</span>&gt;@color/material_blue_700&lt;/item&gt;</span><br><span class="line">&lt;item name=<span class="string">"colorAccent"</span>&gt;@color/material_green_A200&lt;/item&gt;</span><br><span class="line"></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在appliaction中使用我们的这个Theme.MyTheme，上一次的文章中有个错误，这种情况下不需要在valus-v21中创建一个同名的继承自Material的theme,否则会报错。这样我们就可以使用Material风格了。不过低版本上面还是有很多地方不可以实现这种效果的。</p>
<h4 id="使用Toolbar代替ActionBar。">使用Toolbar代替ActionBar。</h4><p>android 5.0增加了ToolBar,可以用其代替ActionBar,在更低版本中，推荐使用，这样，动画特效更方便实现。</p>
<p>在布局文件中增加Toolbar：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimaryDark"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>在代码中，使用Toolbar代替ActionBar（Activity必须是继承自ActionBarActivity的）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(getLayoutResource());</span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        <span class="keyword">if</span> (toolbar != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setSupportActionBar(toolbar);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="使用CardView">使用CardView</h4><p>不详说了，参看我之前的博客吧<a href="http://blog.isming.me/2014/10/21/creating-app-with-material-design-two-list/">http://blog.isming.me/2014/10/21/creating-app-with-material-design-two-list/</a>。</p>
<h4 id="使用动画">使用动画</h4><p>对于低版本，在support v7包中，提供了一些兼容，可以使用activity过渡动画(不过效果没有5.0的好)。</p>
<p>首先声明主题的时候，创建一个AppTheme.Base用来声明主题，在其上增加动画属性:</p>
<p>以下放在values/themes.xml中，用于适配低版本：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme"</span> <span class="attribute">parent</span>=<span class="value">"AppTheme.Base"</span>/&gt;</span><span class="css"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="tag">style</span> <span class="tag">name</span>="<span class="tag">AppTheme</span><span class="class">.Base</span>" <span class="tag">parent</span>="<span class="tag">Theme</span><span class="class">.AppCompat</span>"&gt;</span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">colorPrimary</span>"&gt;<span class="at_rule">@<span class="keyword">color/colorPrimary&lt;/item&gt;</span></span><br><span class="line">        &lt;item name=<span class="string">"colorPrimaryDark"</span>&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">        &lt;item name=<span class="string">"android:windowNoTitle"</span>&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;item name=<span class="string">"windowActionBar"</span>&gt;false&lt;/item&gt;</span><br><span class="line">    </span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>以下放在values-v21/themes.xml中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme"</span> <span class="attribute">parent</span>=<span class="value">"AppTheme.Base"</span>&gt;</span><span class="css"></span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="rule"><span class="attribute">android</span>:<span class="value">windowContentTransitions<span class="string">"&gt;true&lt;/item&gt;</span><br><span class="line">    &lt;item name="</span>android:windowAllowEnterTransitionOverlap<span class="string">"&gt;true&lt;/item&gt;</span><br><span class="line">    &lt;item name="</span>android:windowAllowReturnTransitionOverlap<span class="string">"&gt;true&lt;/item&gt;</span><br><span class="line">    &lt;item name="</span>android:windowSharedElementEnterTransition<span class="string">"&gt;@android:transition/move&lt;/item&gt;</span><br><span class="line">    &lt;item name="</span>android:windowSharedElementExitTransition<span class="string">"&gt;@android:transition/move&lt;/item&gt;</span><br><span class="line"></span></span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在代码中启动新Activity的时候，使用v7包中的方法,具体过渡方法跟5.0一样，可以看我之前的博客：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation(</span><br><span class="line">     activity, transitionView, DetailActivity.EXTRA_IMAGE);</span><br><span class="line">ActivityCompat.startActivity(activity, <span class="keyword">new</span> Intent(activity, DetailActivity.class),</span><br><span class="line">options.toBundle());</span><br></pre></td></tr></table></figure></p>
<h3 id="使用开源控件">使用开源控件</h3><p>对于很多的控件样式，动画，对话框等，使用兼容包无法完成，我们可以使用一些大神开发的第三方包来实现.</p>
<p>组件: <a href="https://github.com/navasmdc/MaterialDesignLibrary" target="_blank" rel="external">https://github.com/navasmdc/MaterialDesignLibrary</a></p>
<p><a href="https://github.com/keithellis/MaterialWidget" target="_blank" rel="external">https://github.com/keithellis/MaterialWidget</a></p>
<p>上面两个主要是一些实现了Material的组件</p>
<p>Material Design的对话框: <a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">https://github.com/afollestad/material-dialogs</a></p>
<p>这个github仓库收集了很多的开源实现，大家可以过来看看。<a href="https://github.com/lightSky/MaterialDesignCenter" target="_blank" rel="external">https://github.com/lightSky/MaterialDesignCenter</a></p>
<h3 id="其他">其他</h3><p>根据提供的规范，自己来实现相应的ui界面以及动画效果等等。<br>这里提供一下谷歌的规范地址:<br>谷歌设计规范：<a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">http://www.google.com/design/spec/material-design/introduction.html需要翻墙</a>、<a href="http://design.1sters.com/" target="_blank" rel="external">http://design.1sters.com(中文)</a></p>
<p>图标素材：<a href="https://github.com/google/material-design-icons" target="_blank" rel="external">https://github.com/google/material-design-icons</a>、<a href="https://github.com/Templarian/MaterialDesign" target="_blank" rel="external">https://github.com/Templarian/MaterialDesign</a></p>
<p>谷歌IO2014，Material Design的诠释:<a href="https://github.com/google/iosched" target="_blank" rel="external">https://github.com/google/iosched</a></p>
<p>其他人写的应用:<a href="https://github.com/afollestad/cabinet" target="_blank" rel="external">https://github.com/afollestad/cabinet</a></p>
<h4 id="我写的一个应用，从之前的版本改过来，还没完成，大家随便看看就行了,也是Material_Design：https://github-com/sangmingming/Meizitu">我写的一个应用，从之前的版本改过来，还没完成，大家随便看看就行了,也是Material Design：<a href="https://github.com/sangmingming/Meizitu" target="_blank" rel="external">https://github.com/sangmingming/Meizitu</a></h4><blockquote>
<p>原文地址：<a href="http://blog.isming.me/2014/11/17/material-design-for-pre-lollipop-android/">http://blog.isming.me/2014/11/17/material-design-for-pre-lollipop-android/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>​Material Design真的很好看，动画效果真的很实用。前面也写了一些文章介绍如何编写Material风格的程序，但是很多都是一些新的api，低版本上面没有这些api，我们没办法使用。但是不用气馁，google官方，以及一些大牛，给我们提供了一些程序，让我们在低版本上面可以实现Material风格的程序，这里就给大家介绍一下。</p>
<p><img src="http://isming.qiniudn.com/screenmeizitu.png" alt="妹子图截屏"></p>
<p>妹子图截屏</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="material design" scheme="http://blog.isming.me/tags/material-design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建Material Design风格的Android应用--使用自定义动画]]></title>
    <link href="http://blog.isming.me/2014/11/13/creating-app-with-material-design-five-animations/"/>
    <id>http://blog.isming.me/2014/11/13/creating-app-with-material-design-five-animations/</id>
    <published>2014-11-13T14:59:44.000Z</published>
    <updated>2014-12-17T01:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>动画在Material Design设计中给用户反馈放用户点击时，并且在程序用户界面中提供连贯的视觉。Material主题为按钮（Button）和activity的转换提供了一些默认的动画，在android5.0（api 21）和更高的版本，你可以自定义这些动画和创建一个新动画：</p>
<ul>
<li>Touch feedback（触摸反馈）</li>
<li>Circular Reveal（循环揭露效果）</li>
<li>Activity transitions（Activity转换效果）</li>
<li>Curved motion（曲线运动）</li>
<li>View state changes （视图状态改变）<a id="more"></a>
</li>
</ul>
<h3 id="自定义触摸反馈">自定义触摸反馈</h3><p>触摸反馈在Material Design中在触摸点提供了一个即时视觉确认当用户作用在UI元素。按钮的默认触摸反馈动画是使用了新的RippleDrawable类，它会是波纹效果在不同状态间变换。</p>
<p>大多数情况下，我们可以使用这个功能通过在xml文件中定义背景：</p>
<blockquote>
<p>?android:attr/selectableItemBackground  有界限的波纹<br>?android:attr/selectableItemBackgroundBorderless 可以超出视图区域的波纹<br>?android:attr/selectableItemBackgroundBorderless 是21新添加的api</p>
</blockquote>
<p>另外，还以使用<code>ripple</code>元素定义<code>RippleDrawable</code>作为一个xml资源。</p>
<p>你可以给RippleDrawable对象分配一个颜色。使用主题的<code>android:colorControlHighlight</code>属性可以改变默认的触摸反馈颜色。</p>
<p>更多信息，查看RippleDrawable类的api指南。</p>
<h3 id="使用揭露效果">使用揭露效果</h3><p>揭露动画为用户提供视觉上的持续性挡显示或者隐藏一组界面元素。<code>ViewAnimationUtils.createCircularReveal()</code>方法使你可以使用动画效果来揭露或者隐藏一个视图。</p>
<p>这样揭露一个先前隐藏的视图：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// previously invisible view</span></span><br><span class="line">View myView = findViewById(R.id.my_view);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the center for the clipping circle</span></span><br><span class="line"><span class="keyword">int</span> cx = (myView.getLeft() + myView.getRight()) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> cy = (myView.getTop() + myView.getBottom()) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the final radius for the clipping circle</span></span><br><span class="line"><span class="keyword">int</span> finalRadius = Math.max(myView.getWidth(), myView.getHeight());</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the animator for this view (the start radius is zero)</span></span><br><span class="line">Animator anim =</span><br><span class="line">    ViewAnimationUtils.createCircularReveal(myView, cx, cy, <span class="number">0</span>, finalRadius);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make the view visible and start the animation</span></span><br><span class="line">myView.setVisibility(View.VISIBLE);</span><br><span class="line">anim.start();</span><br></pre></td></tr></table></figure></p>
<p>这样隐藏一个先前显示的视图：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// previously visible view</span></span><br><span class="line"><span class="keyword">final</span> View myView = findViewById(R.id.my_view);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the center for the clipping circle</span></span><br><span class="line"><span class="keyword">int</span> cx = (myView.getLeft() + myView.getRight()) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> cy = (myView.getTop() + myView.getBottom()) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the initial radius for the clipping circle</span></span><br><span class="line"><span class="keyword">int</span> initialRadius = myView.getWidth();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create the animation (the final radius is zero)</span></span><br><span class="line">Animator anim =</span><br><span class="line">    ViewAnimationUtils.createCircularReveal(myView, cx, cy, initialRadius, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// make the view invisible when the animation is done</span></span><br><span class="line">anim.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAnimationEnd(animation);</span><br><span class="line">        myView.setVisibility(View.INVISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// start the animation</span></span><br><span class="line">anim.start();</span><br></pre></td></tr></table></figure></p>
<h3 id="自定义activity转换效果">自定义activity转换效果</h3><p>activity间转换在Material Design程序中提供不同状态间的视觉连接通过在公用元素上动作或者转换。你可以为进入或退出的转换自定义动画，共享元素在不同的activity之间的转换效果。<br>进入过渡决定activity中的视图怎样进入场景。比如在爆裂进入过渡效果中，视图从屏幕外面飞向屏幕中间进入场景。</p>
<p>退出过渡决定activity中的视图怎样退出场景。比如，在爆裂退出过渡效果中，视图从中间向远处退出场景。<br>共享元素过渡决定两个activity之间共享的视图怎么在两个activity之间过渡。比如，两个activity有一个相同的图片，在不同的位置和不同的大小，changeImageTransform(图片变换变化)让共享元素平滑的平移和缩放图片在两个activity之间。</p>
<p>android 5.0(api 21)提供以下进入和退出效果：</p>
<ul>
<li>explode(爆裂) - 从场景中间移动视图进入或者退出</li>
<li>slide(滑动) - 视图从场景的一个边缘进入或者退出</li>
<li>fade(淡入淡出) - 从场景添加或者移除一个视图通过改变他的透明</li>
</ul>
<p>所有过渡效果都继承<code>Visibility</code>类，因此支持作为一个进入或者退出过渡效果。</p>
<p>更多细节，看<code>Transition</code>类的api指南。</p>
<p>Android5.0(api 21)也支持共享元素过渡效果：</p>
<ul>
<li>changeBounds -  改变目标视图的布局边界</li>
<li>changeClipBounds - 裁剪目标视图边界</li>
<li>changeTransform - 改变目标视图的缩放比例和旋转角度</li>
<li>changeImageTransform - 改变目标图片的大小和缩放比例</li>
</ul>
<p>当你在程序中开启activity间的过渡动画时，默认的交叉淡入淡出效果会在两个activity之间激活。</p>
<p><img src="http://isming.qiniudn.com/SceneTransition.png" alt="共享元素动画"></p>
<p>一个共享元素过渡效果</p>
<h5 id="指定过渡效果">指定过渡效果</h5><p>首先，使用在从material theme继承的样式中，使用<code>android:windowContentTransitions</code>属性开启窗口内内容过渡效果。也可以在样式定义中第一进入，退出，共享元素的效果：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"BaseAppTheme"</span> <span class="attribute">parent</span>=<span class="value">"android:Theme.Material"</span>&gt;</span><span class="css"></span><br><span class="line">  &lt;!<span class="tag">--</span> <span class="tag">enable</span> <span class="tag">window</span> <span class="tag">content</span> <span class="tag">transitions</span> <span class="tag">--</span>&gt;</span><br><span class="line">  &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="rule"><span class="attribute">android</span>:<span class="value">windowContentTransitions<span class="string">"&gt;true&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- specify enter and exit transitions --&gt;</span><br><span class="line">  &lt;item name="</span>android:windowEnterTransition<span class="string">"&gt;@transition/explode&lt;/item&gt;</span><br><span class="line">  &lt;item name="</span>android:windowExitTransition<span class="string">"&gt;@transition/explode&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- specify shared element transitions --&gt;</span><br><span class="line">  &lt;item name="</span>android:windowSharedElementEnterTransition<span class="string">"&gt;</span><br><span class="line">    @transition/change_image_transform&lt;/item&gt;</span><br><span class="line">  &lt;item name="</span>android:windowSharedElementExitTransition<span class="string">"&gt;</span><br><span class="line">    @transition/change_image_transform&lt;/item&gt;</span><br><span class="line"></span></span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例中的过渡<code>change_image_transform</code>定义如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/transition/change_image_transform.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- (see also Shared Transitions below) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">transitionSet</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">changeImageTransform</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">transitionSet</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>changeImageTransform</code>元素对应<code>ChangeImageTransform</code>类。更多信息，查看<code>Transition</code>的api指南。</p>
<p>在代码中启用窗口内容过渡效果，使用<code>Window.requestFeature()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inside your activity (if you did not enable transitions in your theme)</span></span><br><span class="line">getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set an exit transition</span></span><br><span class="line">getWindow().setExitTransition(<span class="keyword">new</span> Explode());</span><br></pre></td></tr></table></figure></p>
<p>在代码中定义过渡效果，使用下面的方法，并传一个<code>Transition</code>对象：</p>
<ul>
<li>Window.setEnterTransition()</li>
<li>Window.setExitTransition()</li>
<li>Window.setSharedElementEnterTransition()</li>
<li>Window.setSharedElementExitTransition()</li>
</ul>
<p><code>setExitTransition()</code>和<code>setSharedElementExitTransition()</code>方法为调用的activity定义退出过渡效果，<code>setEnterTransition()</code>和<code>setSharedElementEnterTransition()</code>方法为调用的activity定义进入过渡效果。</p>
<p>为了达到完整的过渡效果，必须在进入的和退出的两个activity上都启用window内容过渡。否则，正调用的activity会开始退出过渡，你就会看到窗口过渡效果（比如缩放，或者淡出）。</p>
<p>更快的开始一个进入过渡，使用<code>Window.setAllowEnterTransitionOverlap()</code>方法在被调用的activity。这让你有更加激动人心的进入过渡效果。</p>
<h4 id="打开activity使用过渡">打开activity使用过渡</h4><p>如果你为一个activity开启过渡并且设置了一个退出过渡效果，过渡效果会在你打开其他activity的时候激活，像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startActivity(intent,</span><br><span class="line">        ActivityOptions.makeSceneTransitionAnimation(<span class="keyword">this</span>).toBundle());</span><br></pre></td></tr></table></figure>
<p>如果你给第二个activity设置了进入过渡动画，过渡也会在第二个activity启动的时候激活。当你启动其他的activity时，如果需要禁用过渡效果，提供一个为<code>null</code>的bundle选项。</p>
<h4 id="打开一个activity包含一个共享元素">打开一个activity包含一个共享元素</h4><p>使用一个场景过渡动画在两个activity之间包括一个共享元素：</p>
<ol>
<li>在theme中开启窗口内容过渡效果 </li>
<li>在style中指定一个共享元素过渡效果 </li>
<li>在xml中定义过渡样式 </li>
<li>在两个activity的样式文件中给共享元素分配一个相同的名字使用<code>android:transitionName</code>属性 </li>
<li>使用<code>ActivityOptions.makeSceneTransitionAnimation()</code>方法。 </li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the element that receives the click event</span></span><br><span class="line"><span class="keyword">final</span> View imgContainerView = findViewById(R.id.img_container);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get the common element for the transition in this activity</span></span><br><span class="line"><span class="keyword">final</span> View androidRobotView = findViewById(R.id.image_small);</span><br><span class="line"></span><br><span class="line"><span class="comment">// define a click listener</span></span><br><span class="line">imgContainerView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, Activity2.class);</span><br><span class="line">        <span class="comment">// create the transition animation - the images in the layouts</span></span><br><span class="line">        <span class="comment">// of both activities are defined with android:transitionName="robot"</span></span><br><span class="line">        ActivityOptions options = ActivityOptions</span><br><span class="line">            .makeSceneTransitionAnimation(<span class="keyword">this</span>, androidRobotView, <span class="string">"robot"</span>);</span><br><span class="line">        <span class="comment">// start the new activity</span></span><br><span class="line">        startActivity(intent, options.toBundle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>对于在代码中生成的动态共享视图，使用`View.setTransitionName()方法在两个activity中给指定相同的名字。</p>
<p>当完成第二个activity的时候，如果需要逆转该过渡动画，使用Activity.finishAfterTransition()方法代替Activity.finish()</p>
<h4 id="打开一个activity包含多个共享元素">打开一个activity包含多个共享元素</h4><p>使用一个场景过渡动画在两个activity之间包括多于一个共享元素，在两个activity中定义所有的的共享元素使用<code>android:transitionName</code>属性（或使用View.setTransitionName()方法在所有的activity中）,并且创建一个像下面这样的ActivityOptions对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(<span class="keyword">this</span>,</span><br><span class="line">        Pair.create(view1, <span class="string">"agreedName1"</span>),</span><br><span class="line">        Pair.create(view2, <span class="string">"agreedName2"</span>));</span><br></pre></td></tr></table></figure></p>
<h3 id="使用曲线运动">使用曲线运动</h3><p>Material Design中，动画依赖时间插值和空间移动模式曲线。在android5.0(api 21)和更高版本，你可以为动画自定义时间曲线和移动曲线。</p>
<p><code>PathInterpolator</code>类是一个新的基于贝塞尔曲线或Path对象的插值器。这个插值器在1*1的正方形上定义了曲线运动，以（0，0）和（1，1）点作为锚点，根据够照参数控制点。你也可以使用xml文件的定义一个路径插值器，如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">pathInterpolator</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:controlX1</span>=<span class="value">"0.4"</span></span><br><span class="line">    <span class="attribute">android:controlY1</span>=<span class="value">"0"</span></span><br><span class="line">    <span class="attribute">android:controlX2</span>=<span class="value">"1"</span></span><br><span class="line">    <span class="attribute">android:controlY2</span>=<span class="value">"1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>Material Design设计规范中，系统提供了三个基本曲线的xml资源:</p>
<ul>
<li>@interpolator/fast_out_linear_in.xml</li>
<li>@interpolator/fast_out_slow_in.xml</li>
<li>@interpolator/linear_out_slow_in.xml</li>
</ul>
<p>我们可以给<code>Animator.setInterpolator()</code>传一个<code>PathInterpolator</code>对象来设置。</p>
<p><code>ObjectAnimator</code>类有新的构造方法，你可以一次使用两个或者属性使用path独立于坐标动画。比如，下面的动画使用一个Path对象去动作一个视图的x和y属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator mAnimator;</span><br><span class="line">mAnimator = ObjectAnimator.ofFloat(view, View.X, View.Y, path);</span><br><span class="line">...</span><br><span class="line">mAnimator.start();</span><br></pre></td></tr></table></figure></p>
<h3 id="视图状态改变动画">视图状态改变动画</h3><p><code>StateListAnimator</code>定义动画当视图的状态改变的时候运行，下面的例子是怎么在xml中定义一个StateListAnimator动画：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- animate the translationZ property of a view when pressed --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">selector</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:state_pressed</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">objectAnimator</span> <span class="attribute">android:propertyName</span>=<span class="value">"translationZ"</span></span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"@android:integer/config_shortAnimTime"</span></span><br><span class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"2dp"</span></span><br><span class="line">        <span class="attribute">android:valueType</span>=<span class="value">"floatType"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- you could have other objectAnimator elements</span><br><span class="line">             here for "x" and "y", or other properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:state_enabled</span>=<span class="value">"true"</span></span><br><span class="line">    <span class="attribute">android:state_pressed</span>=<span class="value">"false"</span></span><br><span class="line">    <span class="attribute">android:state_focused</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">objectAnimator</span> <span class="attribute">android:propertyName</span>=<span class="value">"translationZ"</span></span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"100"</span></span><br><span class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"0"</span></span><br><span class="line">        <span class="attribute">android:valueType</span>=<span class="value">"floatType"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>给视图附加自定义的视图状态动画，使用<code>selector</code>元素在xml文件中定义一个动画祥例子中这样，给视图分配动画使用<code>android:stateListAnimator</code>属性。在代码中使用，使用<code>AnimationInflater.loadStateListAnimator()</code>方法，并且使用<code>View.setStateListAnimator()</code>方法。</p>
<p>当你的主题是继承的Material主题，按钮默认有一个Z动画。如果需要避免这个动画，设置<code>android:stateListAnimator</code>属性为<code>@null</code>即可。</p>
<p><code>AnimatedStateListDrawable</code>类让你创建可绘制图在相关联的视图状态改变。android5.0的一些系统组件默认使用这些动画。下面的例子是如何在xml文件中定义一个<code>AnimatedStateListDrawable</code>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/drawable/myanimstatedrawable.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">animated-selector</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- provide a different drawable for each state--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:id</span>=<span class="value">"@+id/pressed"</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/drawableP"</span></span><br><span class="line">        <span class="attribute">android:state_pressed</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:id</span>=<span class="value">"@+id/focused"</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/drawableF"</span></span><br><span class="line">        <span class="attribute">android:state_focused</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:id</span>=<span class="value">"@id/default"</span></span><br><span class="line">        <span class="attribute">android:drawable</span>=<span class="value">"@drawable/drawableD"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- specify a transition --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">transition</span> <span class="attribute">android:fromId</span>=<span class="value">"@+id/default"</span> <span class="attribute">android:toId</span>=<span class="value">"@+id/pressed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">animation-list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:duration</span>=<span class="value">"15"</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/dt1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:duration</span>=<span class="value">"15"</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/dt2"</span>/&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="title">animation-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">transition</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="title">animated-selector</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="可绘矢量动画">可绘矢量动画</h3><p>可绘制矢量图在拉伸时不会失真。<code>AnimatedVectorDrawable</code>类让你可以在可绘制矢量图上面作用动画。</p>
<p>通常需要在三个xml文件中定义可动的矢量图：</p>
<p>一个矢量图使用<code>&lt;vector&gt;</code>元素,放在<code>res/drawable/</code>下。<br>一个可动的矢量图使用<code>&lt;animated-vector&gt;</code>元素，放在<code>res/drawable/</code>下。<br>一个或更多个动画对象使用<code>&lt;objectAnimator&gt;</code>元素，放在<code>res/anim/</code>下。</p>
<p>可动矢量图可以使用<code>&lt;group&gt;</code>和<code>&lt;path&gt;</code>元素。<code>&lt;group&gt;</code>元素定义一系列路径或者子组，<code>&lt;path&gt;</code>元素定义可绘图的路径。</p>
<p>当你定义了一个想要作用动画的矢量可绘制图，使用<code>android:name</code>属性给每个group和path指定一个唯一的名字，这样你可以从动画的定义中找到他们。比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/drawable/vectordrawable.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">vector</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:height</span>=<span class="value">"64dp"</span></span><br><span class="line">    <span class="attribute">android:width</span>=<span class="value">"64dp"</span></span><br><span class="line">    <span class="attribute">android:viewportHeight</span>=<span class="value">"600"</span></span><br><span class="line">    <span class="attribute">android:viewportWidth</span>=<span class="value">"600"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">group</span></span><br><span class="line">        <span class="attribute">android:name</span>=<span class="value">"rotationGroup"</span></span><br><span class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"300.0"</span></span><br><span class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"300.0"</span></span><br><span class="line">        <span class="attribute">android:rotation</span>=<span class="value">"45.0"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">path</span></span><br><span class="line">            <span class="attribute">android:name</span>=<span class="value">"v"</span></span><br><span class="line">            <span class="attribute">android:fillColor</span>=<span class="value">"#000000"</span></span><br><span class="line">            <span class="attribute">android:pathData</span>=<span class="value">"M300,70 l 0,-70 70,70 0,0 -70,70z"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">vector</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可动的矢量绘制通过刚刚说到定义的名字，来找到这些path和group：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/drawable/animvectordrawable.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">animated-vector</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">  <span class="attribute">android:drawable</span>=<span class="value">"@drawable/vectordrawable"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">target</span></span><br><span class="line">        <span class="attribute">android:name</span>=<span class="value">"rotationGroup"</span></span><br><span class="line">        <span class="attribute">android:animation</span>=<span class="value">"@anim/rotation"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">target</span></span><br><span class="line">        <span class="attribute">android:name</span>=<span class="value">"v"</span></span><br><span class="line">        <span class="attribute">android:animation</span>=<span class="value">"@anim/path_morph"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">animated-vector</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>动画的定义表现在ObjectAnimator和AnimatorSet对象中。第一个动画在这个例子中是让目标组旋转360度：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/anim/rotation.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">objectAnimator</span></span><br><span class="line">    <span class="attribute">android:duration</span>=<span class="value">"6000"</span></span><br><span class="line">    <span class="attribute">android:propertyName</span>=<span class="value">"rotation"</span></span><br><span class="line">    <span class="attribute">android:valueFrom</span>=<span class="value">"0"</span></span><br><span class="line">    <span class="attribute">android:valueTo</span>=<span class="value">"360"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>第二个动画例子是把矢量可绘图从一个形状变成另一种。所有的路径必须兼容变换：他们必须有相同数量的命令，每个命令要有相同的参数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/anim/path_morph.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">objectAnimator</span></span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"3000"</span></span><br><span class="line">        <span class="attribute">android:propertyName</span>=<span class="value">"pathData"</span></span><br><span class="line">        <span class="attribute">android:valueFrom</span>=<span class="value">"M300,70 l 0,-70 70,70 0,0   -70,70z"</span></span><br><span class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"M300,70 l 0,-70 70,0  0,140 -70,0 z"</span></span><br><span class="line">        <span class="attribute">android:valueType</span>=<span class="value">"pathType"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>更多的信息，看<code>AnimatedVectorDrawable</code>的api指南。</p>
<h4 id="PS后记">PS后记</h4><p>这个系列终于写完了，说实话基本上大部分都是翻译的谷歌的官方文档。因为时间问题，再加上自己的英语够烂，最近越来慢。不过，这样一下来，加上自己的一些代码练习，对于Material设计算是能够基本使用了。可惜，大部分的style还都不能向下兼容，只好等５了。</p>
<p>网上有一些大神进来已经开源了一些开源组件，大家可以借此曲线救国，下次有空在专门整理一下。</p>
<p>本文参考： <a href="http://developer.android.com/training/material/animations.html" target="_blank" rel="external">http://developer.android.com/training/material/animations.html</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2014/11/13/creating-app-with-material-design-five-animations/">http://blog.isming.me/2014/11/13/creating-app-with-material-design-five-animations/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>动画在Material Design设计中给用户反馈放用户点击时，并且在程序用户界面中提供连贯的视觉。Material主题为按钮（Button）和activity的转换提供了一些默认的动画，在android5.0（api 21）和更高的版本，你可以自定义这些动画和创建一个新动画：</p>
<ul>
<li>Touch feedback（触摸反馈）</li>
<li>Circular Reveal（循环揭露效果）</li>
<li>Activity transitions（Activity转换效果）</li>
<li>Curved motion（曲线运动）</li>
<li>View state changes （视图状态改变）]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="material design" scheme="http://blog.isming.me/tags/material-design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建Material Design风格的Android应用--使用Drawable]]></title>
    <link href="http://blog.isming.me/2014/11/03/creating-app-with-material-design-four-drawables/"/>
    <id>http://blog.isming.me/2014/11/03/creating-app-with-material-design-four-drawables/</id>
    <published>2014-11-03T14:31:26.000Z</published>
    <updated>2014-12-17T01:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>以下Drawables的功能帮助你在应用中实现Material Design:</p>
<h3 id="图片资源着色">图片资源着色</h3><p>在android 5.0(api 21)和更高版本，可以着色bitmap和.9 png 通过定义透明度遮盖。你可以着色通过使用颜色资源或者主题的属性去解析颜色资源（比如，<code>?android:attr/colorPrimary</code>）.通常我们创建一次，然后资源自适应主题。</p>
<a id="more"></a>
<p>你可以给BitmapDrawable或NinePatchDrawable对象着色使用<code>setTint()</code>方法。你可以可以在布局文件中使用<code>android:tint</code>和<code>android:tintMode</code>属性设置着色颜色和着色模式。</p>
<h3 id="从图片中抽取高亮颜色">从图片中抽取高亮颜色</h3><p>support library r21和更高的版本中包括了<code>Palette</code>类，可以从一个图片中提取高亮颜色。这个类可以提起以下几种突出颜色：</p>
<p>Vibrant   充满生机</p>
<p>Vibrant dark  暗的充满生机</p>
<p>Vibrant light 亮的充满生机</p>
<p>Muted  柔和</p>
<p>Muted dark  暗的柔和</p>
<p>Muted light 亮的柔和</p>
<p>传递一个Bitmap对象给静态方法Palette.generate()，它会在后台线程帮你从后台线程提取颜色。如果你不能使用这个后台线程，使用Palette.generateAsync()方法，并且设置一个监听器listener.</p>
<p>你可以从图片中取得突出颜色使用Palette类中的getter方法，比如Palette.getVibrantColor.</p>
<p>在项目中使用Palette方法，需要在项目中包含v7包palette的jar, gradle dependecy添加的方式是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">compile <span class="string">'com.android.support:palette-v7:21.0.+'</span></span><br></pre></td></tr></table></figure>
<p>下面这个是示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Palette.generateAsync(bitmap, <span class="keyword">new</span> Palette.PaletteAsyncListener() &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGenerated</span><span class="params">(Palette palette)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// Do something with colors...</span></span><br><span class="line">         palette.getVibrantColor(Color.BLACK); <span class="comment">//get a color in rgb value</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p>
<p><img src="http://isming.qiniudn.com/palette_mode.jpg" alt=""></p>
<p>更多信息，请查看Paltette的api文档:<a href="http://developer.android.com/reference/android/support/v7/graphics/Palette.html" target="_blank" rel="external">http://developer.android.com/reference/android/support/v7/graphics/Palette.html</a></p>
<h3 id="创建矢量drawables">创建矢量drawables</h3><p>在android 5.0和更高版本中，可以创建矢量的drawable，在缩放的时候不会失真。你只需要定义一个矢量图片文件，相反的，使用bitmap位图则需要针对不同的分辨率创建多个文件。创建一个矢量图片，你需要说明图形的详细，在xml文件的<vector>标签下。</vector></p>
<p>下面是一个例子：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- res/drawable/heart.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">vector</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:width</span>=<span class="value">"256dp"</span></span><br><span class="line">    <span class="attribute">android:height</span>=<span class="value">"256dp"</span></span><br><span class="line">    <span class="attribute">android:viewportHeight</span>=<span class="value">"32"</span></span><br><span class="line">    <span class="attribute">android:viewportWidth</span>=<span class="value">"32"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- draw a path --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">path</span></span><br><span class="line">        <span class="attribute">android:fillColor</span>=<span class="value">"#f15467"</span></span><br><span class="line">        <span class="attribute">android:pathData</span>=<span class="value">"M20.5,9.5</span><br><span class="line">                        c-1.955,0,-3.83,1.268,-4.5,3</span><br><span class="line">                        c-0.67,-1.732,-2.547,-3,-4.5,-3</span><br><span class="line">                        C8.957,9.5,7,11.432,7,14</span><br><span class="line">                        c0,3.53,3.793,6.257,9,11.5</span><br><span class="line">                        c5.207,-5.242,9,-7.97,9,-11.5</span><br><span class="line">                        C25,11.432,23.043,9.5,20.5,9.5z"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">vector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的图显示效果如下：</p>
<p><img src="http://isming.qiniudn.com/vector_demo.png" alt=""></p>
<p>矢量图片在android表现为<code>VectorDrawable</code>对象。更多信息，查看Svg Path reference。</p>
<p>参考资料:<a href="http://developer.android.com/training/material/drawables.html" target="_blank" rel="external">http://developer.android.com/training/material/drawables.html</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2014/11/03/creating-app-with-material-design-four-drawables/">http://blog.isming.me/2014/11/03/creating-app-with-material-design-four-drawables/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>以下Drawables的功能帮助你在应用中实现Material Design:</p>
<h3 id="图片资源着色">图片资源着色</h3><p>在android 5.0(api 21)和更高版本，可以着色bitmap和.9 png 通过定义透明度遮盖。你可以着色通过使用颜色资源或者主题的属性去解析颜色资源（比如，<code>?android:attr/colorPrimary</code>）.通常我们创建一次，然后资源自适应主题。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="material design" scheme="http://blog.isming.me/tags/material-design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Java编程风格指南]]></title>
    <link href="http://blog.isming.me/2014/10/27/google-java-style/"/>
    <id>http://blog.isming.me/2014/10/27/google-java-style/</id>
    <published>2014-10-27T14:15:34.000Z</published>
    <updated>2014-12-17T01:56:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="目录">目录</h2><ol>
<li><a href="#Intro">前言</a></li>
<li><a href="#SFBasic">源文件基础</a></li>
<li><a href="#SFStruct">源文件结构</a></li>
<li><a href="#Format">格式</a></li>
<li><a href="#Naming">命名约定</a></li>
<li><a href="#Practice">编程实践</a></li>
<li><a href="#Javadoc">Javadoc</a></li>
<li><a href="#End">后记</a></li>
</ol>
<h2 id="前言"><a id="Intro">前言</a></h2><p>这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则，<br>我们才认为它符合Google的Java编程风格。</p>
<p>与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题，<br>同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则，<br>对于那些不是明确强制要求的，我们尽量避免提供意见。</p>
<a id="more"></a>
<h3 id="1-1_术语说明">1.1 术语说明</h3><p>在本文档中，除非另有说明：</p>
<ol>
<li>术语class可表示一个普通类，枚举类，接口或是annotation类型(<code>@interface</code>)</li>
<li>术语comment只用来指代实现的注释(implementation comments)，我们不使用“documentation comments”一词，而是用Javadoc。</li>
</ol>
<p>其他的术语说明会偶尔在后面的文档出现。</p>
<h3 id="1-2_指南说明">1.2 指南说明</h3><p>本文档中的示例代码并不作为规范。也就是说，虽然示例代码是遵循Google编程风格，但并不意味着这是展现这些代码的唯一方式。<br>示例中的格式选择不应该被强制定为规则。</p>
<h2 id="源文件基础"><a id="SFBasic">源文件基础</a></h2><h3 id="2-1_文件名">2.1 文件名</h3><p>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为<code>.java</code>。</p>
<h3 id="2-2_文件编码：UTF-8">2.2 文件编码：UTF-8</h3><p>源文件编码格式为UTF-8。</p>
<h3 id="2-3_特殊字符">2.3 特殊字符</h3><h4 id="2-3-1_空白字符">2.3.1 空白字符</h4><p>除了行结束符序列，ASCII水平空格字符(0x20，即空格)是源文件中唯一允许出现的空白字符，这意味着：</p>
<ol>
<li>所有其它字符串中的空白字符都要进行转义。</li>
<li>制表符不用于缩进。</li>
</ol>
<h4 id="2-3-2_特殊转义序列">2.3.2 特殊转义序列</h4><p>对于具有特殊<a href="http://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97" target="_blank" rel="external">转义序列</a>的任何字符(\b, \t, \n, \f, \r, \”, \’及\)，我们使用它的转义序列，而不是相应的八进制(比如<code>\012</code>)或Unicode(比如<code>\u000a</code>)转义。</p>
<h4 id="2-3-3_非ASCII字符">2.3.3 非ASCII字符</h4><p>对于剩余的非ASCII字符，是使用实际的Unicode字符(比如∞)，还是使用等价的Unicode转义符(比如\u221e)，取决于哪个能让代码更易于阅读和理解。</p>
<blockquote>
<blockquote>
<p>Tip: 在使用Unicode转义符或是一些实际的Unicode字符时，建议做些注释给出解释，这有助于别人阅读和理解。</p>
</blockquote>
</blockquote>
<p>例如：</p>
<pre><code><span class="built_in">String</span> unitAbbrev = <span class="string">"μs"</span>;                                 | 赞，即使没有注释也非常清晰
<span class="built_in">String</span> unitAbbrev = <span class="string">"\u03bcs"</span>; <span class="comment">// "μs"                    | 允许，但没有理由要这样做</span>
<span class="built_in">String</span> unitAbbrev = <span class="string">"\u03bcs"</span>; <span class="comment">// Greek letter mu, "s"    | 允许，但这样做显得笨拙还容易出错</span>
<span class="built_in">String</span> unitAbbrev = <span class="string">"\u03bcs"</span>;                            | 很糟，读者根本看不出这是什么
<span class="keyword">return</span> <span class="string">'\ufeff'</span> + content; <span class="comment">// byte order mark             | Good，对于非打印字符，使用转义，并在必要时写上注释</span>
</code></pre><blockquote>
<blockquote>
<p>Tip: 永远不要由于害怕某些程序可能无法正确处理非ASCII字符而让你的代码可读性变差。当程序无法正确处理非ASCII字符时，它自然无法正确运行，<br>你就会去fix这些问题的了。(言下之意就是大胆去用非ASCII字符，如果真的有需要的话)</p>
</blockquote>
</blockquote>
<h2 id="源文件结构"><a id="SFStruct">源文件结构</a></h2><p>一个源文件包含(按顺序地)：</p>
<ol>
<li>许可证或版权信息(如有需要)</li>
<li>package语句</li>
<li>import语句</li>
<li>一个顶级类(<strong>只有一个</strong>)</li>
</ol>
<p>以上每个部分之间用一个空行隔开。</p>
<h3 id="3-1_许可证或版权信息">3.1 许可证或版权信息</h3><p>如果一个文件包含许可证或版权信息，那么它应当被放在文件最前面。</p>
<h3 id="3-2_package语句">3.2 package语句</h3><p>package语句不换行，列限制(4.4节)并不适用于package语句。(即package语句写在一行里)</p>
<h3 id="3-3_import语句">3.3 import语句</h3><h4 id="3-3-1_import不要使用通配符">3.3.1 import不要使用通配符</h4><p>即，不要出现类似这样的import语句：<code>import java.util.*;</code></p>
<h4 id="3-3-2_不要换行">3.3.2 不要换行</h4><p>import语句不换行，列限制(4.4节)并不适用于import语句。(每个import语句独立成行)</p>
<h4 id="3-3-3_顺序和间距">3.3.3 顺序和间距</h4><p>import语句可分为以下几组，按照这个顺序，每组由一个空行分隔：</p>
<ol>
<li>所有的静态导入独立成组</li>
<li><code>com.google</code> imports(仅当这个源文件是在<code>com.google</code>包下)</li>
<li>第三方的包。每个顶级包为一组，字典序。例如：android, com, junit, org, sun</li>
<li><code>java</code> imports</li>
<li><code>javax</code> imports</li>
</ol>
<p>组内不空行，按字典序排列。</p>
<h3 id="3-4_类声明">3.4 类声明</h3><h4 id="3-4-1_只有一个顶级类声明">3.4.1 只有一个顶级类声明</h4><p>每个顶级类都在一个与它同名的源文件中(当然，还包含<code>.java</code>后缀)。</p>
<p>例外：<code>package-info.java</code>，该文件中可没有<code>package-info</code>类。</p>
<h4 id="3-4-2_类成员顺序">3.4.2 类成员顺序</h4><p>类的成员顺序对易学性有很大的影响，但这也不存在唯一的通用法则。不同的类对成员的排序可能是不同的。<br>最重要的一点，每个类应该以某种逻辑去排序它的成员，维护者应该要能解释这种排序逻辑。比如，<br>新的方法不能总是习惯性地添加到类的结尾，因为这样就是按时间顺序而非某种逻辑来排序的。</p>
<h5 id="3-4-2-1_重载：永不分离">3.4.2.1 重载：永不分离</h5><p>当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。</p>
<h2 id="格式"><a id="Format">格式</a></h2><p><strong>术语说明</strong>：块状结构(block-like construct)指的是一个类，方法或构造函数的主体。需要注意的是，数组初始化中的初始值可被选择性地视为块状结构(4.8.3.1节)。</p>
<h3 id="4-1_大括号">4.1 大括号</h3><h4 id="4-1-1_使用大括号(即使是可选的)">4.1.1 使用大括号(即使是可选的)</h4><p>大括号与<code>if, else, for, do, while</code>语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</p>
<h4 id="4-1-2_非空块：K_&amp;_R_风格">4.1.2 非空块：K &amp; R 风格</h4><p>对于非空块和块状结构，大括号遵循Kernighan和Ritchie风格<br>(<a href="http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html" target="_blank" rel="external">Egyptian brackets</a>):</p>
<ul>
<li>左大括号前不换行</li>
<li>左大括号后换行</li>
<li>右大括号前换行</li>
<li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyClass() &#123;</span><br><span class="line">  <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        something();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ProblemException e) &#123;</span><br><span class="line">        recover();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4.8.1节给出了enum类的一些例外。</p>
<h4 id="4-1-3_空块：可以用简洁版本">4.1.3 空块：可以用简洁版本</h4><p>一个空的块状结构里什么也不包含，大括号可以简洁地写成<code>{}</code>，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally)<br>，即使大括号内没内容，右大括号也要换行。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doNothing</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2_块缩进：2个空格">4.2 块缩进：2个空格</h3><p>每当开始一个新的块，缩进增加2个空格，当块结束时，缩进返回先前的缩进级别。缩进级别适用于代码和注释。(见4.1.2节中的代码示例)</p>
<h3 id="4-3_一行一个语句">4.3 一行一个语句</h3><p>每个语句后要换行。</p>
<h3 id="4-4_列限制：80或100">4.4 列限制：80或100</h3><p>一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。</p>
<p>例外：</p>
<ol>
<li>不可能满足列限制的行(例如，Javadoc中的一个长URL，或是一个长的JSNI方法参考)。</li>
<li><code>package</code>和<code>import</code>语句(见3.2节和3.3节)。</li>
<li>注释中那些可能被剪切并粘贴到shell中的命令行。</li>
</ol>
<h3 id="4-5_自动换行">4.5 自动换行</h3><p><strong>术语说明</strong>：一般情况下，一行长代码为了避免超出列限制(80或100个字符)而被分为多行，我们称之为自动换行(line-wrapping)。</p>
<p>我们并没有全面，确定性的准则来决定在每一种情况下如何自动换行。很多时候，对于同一段代码会有好几种有效的自动换行方式。</p>
<blockquote>
<blockquote>
<p>Tip: 提取方法或局部变量可以在不换行的情况下解决代码过长的问题(是合理缩短命名长度吧)</p>
</blockquote>
</blockquote>
<h4 id="4-5-1_从哪里断开">4.5.1 从哪里断开</h4><p>自动换行的基本准则是：更倾向于在更高的语法级别处断开。</p>
<ol>
<li>如果在<code>非赋值运算符</code>处断开，那么在该符号前断开(比如+，它将位于下一行)。注意：这一点与Google其它语言的编程风格不同(如C++和JavaScript)。<br>这条规则也适用于以下“类运算符”符号：点分隔符(.)，类型界限中的&amp;（<code>&lt;T extends Foo &amp; Bar&gt;</code>)，catch块中的管道符号(<code>catch (FooException | BarException e</code>)</li>
<li>如果在<code>赋值运算符</code>处断开，通常的做法是在该符号后断开(比如=，它与前面的内容留在同一行)。这条规则也适用于<code>foreach</code>语句中的分号。</li>
<li>方法名或构造函数名与左括号留在同一行。</li>
<li>逗号(,)与其前面的内容留在同一行。</li>
</ol>
<h4 id="4-5-2_自动换行时缩进至少+4个空格">4.5.2 自动换行时缩进至少+4个空格</h4><p>自动换行时，第一行后的每一行至少比第一行多缩进4个空格(注意：制表符不用于缩进。见2.3.1节)。</p>
<p>当存在连续自动换行时，缩进可能会多缩进不只4个空格(语法元素存在多级时)。一般而言，两个连续行使用相同的缩进当且仅当它们开始于同级语法元素。</p>
<p>第4.6.3水平对齐一节中指出，不鼓励使用可变数目的空格来对齐前面行的符号。</p>
<h3 id="4-6_空白">4.6 空白</h3><h4 id="4-6-1_垂直空白">4.6.1 垂直空白</h4><p>以下情况需要使用一个空行：</p>
<ol>
<li>类内连续的成员之间：字段，构造函数，方法，嵌套类，静态初始化块，实例初始化块。<ul>
<li><strong>例外</strong>：两个连续字段之间的空行是可选的，用于字段的空行主要用来对字段进行逻辑分组。</li>
</ul>
</li>
<li>在函数体内，语句的逻辑分组间使用空行。</li>
<li>类内的第一个成员前或最后一个成员后的空行是可选的(既不鼓励也不反对这样做，视个人喜好而定)。</li>
<li>要满足本文档中其他节的空行要求(比如3.3节：import语句)</li>
</ol>
<p>多个连续的空行是允许的，但没有必要这样做(我们也不鼓励这样做)。</p>
<h4 id="4-6-2_水平空白">4.6.2 水平空白</h4><p>除了语言需求和其它规则，并且除了文字，注释和Javadoc用到单个空格，单个ASCII空格也出现在以下几个地方：</p>
<ol>
<li>分隔任何保留字与紧随其后的左括号(<code>(</code>)(如<code>if, for catch</code>等)。</li>
<li>分隔任何保留字与其前面的右大括号(<code>}</code>)(如<code>else, catch</code>)。</li>
<li>在任何左大括号前(<code>{</code>)，两个例外：<ul>
<li><code>@SomeAnnotation({a, b})</code>(不使用空格)。</li>
<li><code>String[][] x = foo;</code>(大括号间没有空格，见下面的Note)。</li>
</ul>
</li>
<li>在任何二元或三元运算符的两侧。这也适用于以下“类运算符”符号：<ul>
<li>类型界限中的&amp;(<code>&lt;T extends Foo &amp; Bar&gt;</code>)。</li>
<li>catch块中的管道符号(<code>catch (FooException | BarException e</code>)。</li>
<li><code>foreach</code>语句中的分号。</li>
</ul>
</li>
<li>在<code>, : ;</code>及右括号(<code>)</code>)后</li>
<li>如果在一条语句后做注释，则双斜杠(//)两边都要空格。这里可以允许多个空格，但没有必要。</li>
<li>类型和变量之间：List<string> list。</string></li>
<li>数组初始化中，大括号内的空格是可选的，即<code>new int[] {5, 6}</code>和<code>new int[] { 5, 6 }</code>都是可以的。</li>
</ol>
<blockquote>
<blockquote>
<p>Note：这个规则并不要求或禁止一行的开关或结尾需要额外的空格，只对内部空格做要求。</p>
</blockquote>
</blockquote>
<h4 id="4-6-3_水平对齐：不做要求">4.6.3 水平对齐：不做要求</h4><p><strong>术语说明</strong>：水平对齐指的是通过增加可变数量的空格来使某一行的字符与上一行的相应字符对齐。</p>
<p>这是允许的(而且在不少地方可以看到这样的代码)，但Google编程风格对此不做要求。即使对于已经使用水平对齐的代码，我们也不需要去保持这种风格。</p>
<p>以下示例先展示未对齐的代码，然后是对齐的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x; <span class="comment">// this is fine</span></span><br><span class="line"><span class="keyword">private</span> Color color; <span class="comment">// this too</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>   x;      <span class="comment">// permitted, but future edits</span></span><br><span class="line"><span class="keyword">private</span> Color color;  <span class="comment">// may leave it unaligned</span></span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>Tip：对齐可增加代码可读性，但它为日后的维护带来问题。考虑未来某个时候，我们需要修改一堆对齐的代码中的一行。<br>这可能导致原本很漂亮的对齐代码变得错位。很可能它会提示你调整周围代码的空白来使这一堆代码重新水平对齐(比如程序员想保持这种水平对齐的风格)，<br>这就会让你做许多的无用功，增加了reviewer的工作并且可能导致更多的合并冲突。</p>
</blockquote>
</blockquote>
<h3 id="4-7_用小括号来限定组：推荐">4.7 用小括号来限定组：推荐</h3><p>除非作者和reviewer都认为去掉小括号也不会使代码被误解，或是去掉小括号能让代码更易于阅读，否则我们不应该去掉小括号。<br>我们没有理由假设读者能记住整个Java运算符优先级表。</p>
<h3 id="4-8_具体结构">4.8 具体结构</h3><h4 id="4-8-1_枚举类">4.8.1 枚举类</h4><p>枚举常量间用逗号隔开，换行可选。</p>
<p>没有方法和文档的枚举类可写成数组初始化的格式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">enum</span> Suit &#123; CLUBS, HEARTS, SPADES, DIAMONDS &#125;</span><br></pre></td></tr></table></figure>
<p>由于枚举类也是一个类，因此所有适用于其它类的格式规则也适用于枚举类。</p>
<h4 id="4-8-2_变量声明">4.8.2 变量声明</h4><h5 id="4-8-2-1_每次只声明一个变量">4.8.2.1 每次只声明一个变量</h5><p>不要使用组合声明，比如<code>int a, b;</code>。</p>
<h5 id="4-8-2-2_需要时才声明，并尽快进行初始化">4.8.2.2 需要时才声明，并尽快进行初始化</h5><p>不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。<br>局部变量在声明时最好就进行初始化，或者声明后尽快进行初始化。</p>
<h4 id="4-8-3_数组">4.8.3 数组</h4><h5 id="4-8-3-1_数组初始化：可写成块状结构">4.8.3.1 数组初始化：可写成块状结构</h5><p>数组初始化可以写成块状结构，比如，下面的写法都是OK的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[]</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-8-3-2_非C风格的数组声明">4.8.3.2 非C风格的数组声明</h5><p>中括号是类型的一部分：<code>String[] args</code>， 而非<code>String args[]</code>。</p>
<h4 id="4-8-4_switch语句">4.8.4 switch语句</h4><p><strong>术语说明</strong>：switch块的大括号内是一个或多个语句组。每个语句组包含一个或多个switch标签(<code>case FOO:</code>或<code>default:</code>)，后面跟着一条或多条语句。</p>
<h5 id="4-8-4-1_缩进">4.8.4.1 缩进</h5><p>与其它块状结构一致，switch块中的内容缩进为2个空格。</p>
<p>每个switch标签后新起一行，再缩进2个空格，写下一条或多条语句。</p>
<h5 id="4-8-4-2_Fall-through：注释">4.8.4.2 Fall-through：注释</h5><p>在一个switch块内，每个语句组要么通过<code>break, continue, return</code>或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组，<br>任何能表达这个意思的注释都是OK的(典型的是用<code>// fall through</code>)。这个特殊的注释并不需要在最后一个语句组(一般是<code>default</code>)中出现。示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (input) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    prepareOneOrTwo();</span><br><span class="line">    <span class="comment">// fall through</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    handleOneTwoOrThree();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    handleLargeNumber(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-8-4-3_default的情况要写出来">4.8.4.3 default的情况要写出来</h5><p>每个switch语句都包含一个<code>default</code>语句组，即使它什么代码也不包含。</p>
<h4 id="4-8-5_注解(Annotations)">4.8.5 注解(Annotations)</h4><p>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="annotation">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNameIfPresent</span><span class="params">()</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p><strong>例外</strong>：单个的注解可以和签名的第一行出现在同一行。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>应用于字段的注解紧随文档块出现，应用于字段的多个注解允许与字段出现在同一行。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Partial</span> <span class="annotation">@Mock</span> DataLoader loader;</span><br></pre></td></tr></table></figure>
<p>参数和局部变量注解没有特定规则。</p>
<h4 id="4-8-6_注释">4.8.6 注释</h4><h5 id="4-8-6-1_块注释风格">4.8.6.1 块注释风格</h5><p>块注释与其周围的代码在同一缩进级别。它们可以是<code>/* ... */</code>风格，也可以是<code>// ...</code>风格。对于多行的<code>/* ... */</code>注释，后续行必须从<code>*</code>开始，<br>并且与前一行的<code>*</code>对齐。以下示例注释都是OK的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * This is          // And so           <span class="comment">/* Or you can</span><br><span class="line"> * okay.            // is this.          * even do this. */</span></span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<p>注释不要封闭在由星号或其它字符绘制的框架里。</p>
<blockquote>
<blockquote>
<p>Tip：在写多行注释时，如果你希望在必要时能重新换行(即注释像段落风格一样)，那么使用<code>/* ... */</code>。</p>
</blockquote>
</blockquote>
<h4 id="4-8-7_Modifiers">4.8.7 Modifiers</h4><p>类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">protected</span> <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">synchronized</span> <span class="keyword">native</span> <span class="keyword">strictfp</span></span><br></pre></td></tr></table></figure>
<h2 id="命名约定"><a id="Naming">命名约定</a></h2><h3 id="5-1_对所有标识符都通用的规则">5.1 对所有标识符都通用的规则</h3><p>标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式<code>\w+</code>。</p>
<p>在Google其它编程语言风格中使用的特殊前缀或后缀，如<code>name_</code>, <code>mName</code>, <code>s_name</code>和<code>kName</code>，在Java编程风格中都不再使用。</p>
<h3 id="5-2_标识符类型的规则">5.2 标识符类型的规则</h3><h4 id="5-2-1_包名">5.2.1 包名</h4><p>包名全部小写，连续的单词只是简单地连接起来，不使用下划线。</p>
<h4 id="5-2-2_类名">5.2.2 类名</h4><p>类名都以<code>UpperCamelCase</code>风格编写。</p>
<p>类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。</p>
<p>测试类的命名以它要测试的类的名称开始，以<code>Test</code>结束。例如，<code>HashTest</code>或<code>HashIntegrationTest</code>。</p>
<h4 id="5-2-3_方法名">5.2.3 方法名</h4><p>方法名都以<code>lowerCamelCase</code>风格编写。</p>
<p>方法名通常是动词或动词短语。</p>
<p>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如<code>testPop_emptyStack</code>。<br>并不存在唯一正确的方式来命名测试方法。</p>
<h4 id="5-2-4_常量名">5.2.4 常量名</h4><p>常量名命名模式为<code>CONSTANT_CASE</code>，全部字母大写，用下划线分隔单词。那，到底什么算是一个常量？</p>
<p>每个常量都是一个静态final字段，但不是所有静态final字段都是常量。在决定一个字段是否是一个常量时，<br>考虑它是否真的感觉像是一个常量。例如，如果任何一个该实例的观测状态是可变的，则它几乎肯定不会是一个常量。<br>只是永远不<code>打算</code>改变对象一般是不够的，它要真的一直不变才能将它示为常量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constants</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMBER = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableList&lt;String&gt; NAMES = ImmutableList.of(<span class="string">"Ed"</span>, <span class="string">"Ann"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Joiner COMMA_JOINER = Joiner.on(<span class="string">','</span>);  <span class="comment">// because Joiner is immutable</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;</span><br><span class="line"><span class="keyword">enum</span> SomeEnum &#123; ENUM_CONSTANT &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Not constants</span></span><br><span class="line"><span class="keyword">static</span> String nonFinal = <span class="string">"non-final"</span>;</span><br><span class="line"><span class="keyword">final</span> String nonStatic = <span class="string">"non-static"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; mutableCollection = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(MyClass.getName());</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String[] nonEmptyArray = &#123;<span class="string">"these"</span>, <span class="string">"can"</span>, <span class="string">"change"</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>这些名字通常是名词或名词短语。</p>
<h4 id="5-2-5_非常量字段名">5.2.5 非常量字段名</h4><p>非常量字段名以<code>lowerCamelCase</code>风格编写。</p>
<p>这些名字通常是名词或名词短语。</p>
<h4 id="5-2-6_参数名">5.2.6 参数名</h4><p>参数名以<code>lowerCamelCase</code>风格编写。</p>
<p>参数应该避免用单个字符命名。</p>
<h4 id="5-2-7_局部变量名">5.2.7 局部变量名</h4><p>局部变量名以<code>lowerCamelCase</code>风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。</p>
<p>虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。</p>
<p>即使局部变量是final和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</p>
<h4 id="5-2-8_类型变量名">5.2.8 类型变量名</h4><p>类型变量可用以下两种风格之一进行命名：</p>
<ul>
<li>单个的大写字母，后面可以跟一个数字(如：E, T, X, T2)。</li>
<li>以类命名方式(5.2.2节)，后面加个大写的T(如：RequestT, FooBarT)。</li>
</ul>
<h3 id="5-3_驼峰式命名法(CamelCase)">5.3 驼峰式命名法(CamelCase)</h3><p><a href="http://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB" target="_blank" rel="external">驼峰式命名法</a>分大驼峰式命名法(<code>UpperCamelCase</code>)和小驼峰式命名法(<code>lowerCamelCase</code>)。<br>有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。</p>
<p>名字从<code>散文形式</code>(prose form)开始:</p>
<ol>
<li>把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。</li>
<li>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。<ul>
<li>推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。<br>需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</li>
</ul>
</li>
<li>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：<ul>
<li>每个单词的第一个字母都大写，来得到大驼峰式命名。</li>
<li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li>
</ul>
</li>
<li>最后将所有的单词连接起来得到一个标识符。</li>
</ol>
<p>示例：</p>
<pre><code><span class="header">Prose form                Correct               Incorrect
------------------------------------------------------------------</span>
"XML HTTP request"        XmlHttpRequest        XMLHTTPRequest
"new customer ID"         newCustomerId         newCustomerID
"inner stopwatch"         innerStopwatch        innerStopWatch
"supports IPv6 on iOS?"   supportsIpv6OnIos     supportsIPv6OnIOS
"YouTube importer"        YouTubeImporter
<span class="code">                          YoutubeImporter*</span>
</code></pre><p>加星号处表示可以，但不推荐。</p>
<blockquote>
<blockquote>
<p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：”nonempty”和”non-empty”都是正确的，因此方法名<code>checkNonempty</code>和<code>checkNonEmpty</code>也都是正确的。</p>
</blockquote>
</blockquote>
<h2 id="编程实践"><a id="Practice">编程实践</a></h2><h3 id="6-1_@Override：能用则用">6.1 @Override：能用则用</h3><p>只要是合法的，就把<code>@Override</code>注解给用上。</p>
<h3 id="6-2_捕获的异常：不能忽视">6.2 捕获的异常：不能忽视</h3><p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个<code>AssertionError</code>重新抛出。)</p>
<p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">int</span> i = Integer.parseInt(response);</span><br><span class="line">  <span class="keyword">return</span> handleNumericResponse(i);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException ok) &#123;</span><br><span class="line">  <span class="comment">// it's not numeric; that's fine, just continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> handleTextResponse(response);</span><br></pre></td></tr></table></figure>
<p><strong>例外</strong>：在测试中，如果一个捕获的异常被命名为<code>expected</code>，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常，<br>因此在这里就没有必要加注释。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  emptyStack.pop();</span><br><span class="line">  fail();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchElementException expected) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-3_静态成员：使用类进行调用">6.3 静态成员：使用类进行调用</h3><p>使用类名调用静态的类成员，而不是具体某个对象或表达式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Foo aFoo = ...;</span><br><span class="line">Foo.aStaticMethod(); <span class="comment">// good</span></span><br><span class="line">aFoo.aStaticMethod(); <span class="comment">// bad</span></span><br><span class="line">somethingThatYieldsAFoo().aStaticMethod(); <span class="comment">// very bad</span></span><br></pre></td></tr></table></figure>
<h3 id="6-4_Finalizers:_禁用">6.4 Finalizers: 禁用</h3><p>极少会去重载<code>Object.finalize</code>。</p>
<blockquote>
<blockquote>
<p>Tip：不要使用finalize。如果你非要使用它，请先仔细阅读和理解<a href="http://books.google.com/books?isbn=8131726592" target="_blank" rel="external">Effective Java</a><br>第7条款：“Avoid Finalizers”，然后不要使用它。</p>
</blockquote>
</blockquote>
<h2 id="Javadoc"><a id="Javadoc">Javadoc</a></h2><h3 id="7-1_格式">7.1 格式</h3><h4 id="7-1-1_一般形式">7.1.1 一般形式</h4><p>Javadoc块的基本格式如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Multiple lines of Javadoc text are written here,</span><br><span class="line"> * wrapped normally...</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(String p1)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>或者是以下单行形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** An especially short bit of Javadoc. */</span></span><br></pre></td></tr></table></figure>
<p>基本格式总是OK的。当整个Javadoc块能容纳于一行时(且没有Javadoc标记@XXX)，可以使用单行形式。</p>
<h4 id="7-1-2_段落">7.1.2 段落</h4><p>空行(即，只包含最左侧星号的行)会出现在段落之间和Javadoc标记(@XXX)之前(如果有的话)。<br>除了第一个段落，每个段落第一个单词前都有标签<code>&lt;p&gt;</code>，并且它和第一个单词间没有空格。</p>
<h4 id="7-1-3_Javadoc标记">7.1.3 Javadoc标记</h4><p>标准的Javadoc标记按以下顺序出现：<code>@param</code>, <code>@return</code>, <code>@throws</code>, <code>@deprecated</code>, 前面这4种标记如果出现，描述都不能为空。<br>当描述无法在一行中容纳，连续行需要至少再缩进4个空格。</p>
<h3 id="7-2_摘要片段">7.2 摘要片段</h3><p>每个类或成员的Javadoc以一个简短的摘要片段开始。这个片段是非常重要的，在某些情况下，它是唯一出现的文本，比如在类和方法索引中。</p>
<p>这只是一个小片段，可以是一个名词短语或动词短语，但不是一个完整的句子。它不会以<code>A {@code Foo} is a...</code>或<code>This method returns...</code>开头,<br>它也不会是一个完整的祈使句，如<code>Save the record...</code>。然而，由于开头大写及被加了标点，它看起来就像是个完整的句子。</p>
<blockquote>
<blockquote>
<p>Tip：一个常见的错误是把简单的Javadoc写成<code>/** @return the customer ID */</code>，这是不正确的。它应该写成<code>/** Returns the customer ID. */</code>。</p>
</blockquote>
</blockquote>
<h3 id="7-3_哪里需要使用Javadoc">7.3 哪里需要使用Javadoc</h3><p>至少在每个public类及它的每个public和protected成员处使用Javadoc，以下是一些例外：</p>
<h4 id="7-3-1_例外：不言自明的方法">7.3.1 例外：不言自明的方法</h4><p>对于简单明显的方法如<code>getFoo</code>，Javadoc是可选的(即，是可以不写的)。这种情况下除了写“Returns the foo”，确实也没有什么值得写了。</p>
<p>单元测试类中的测试方法可能是不言自明的最常见例子了，我们通常可以从这些方法的描述性命名中知道它是干什么的，因此不需要额外的文档说明。</p>
<blockquote>
<blockquote>
<p>Tip：如果有一些相关信息是需要读者了解的，那么以上的例外不应作为忽视这些信息的理由。例如，对于方法名<code>getCanonicalName</code>，<br>就不应该忽视文档说明，因为读者很可能不知道词语<code>canonical name</code>指的是什么。</p>
</blockquote>
</blockquote>
<h4 id="7-3-2_例外：重载">7.3.2 例外：重载</h4><p>如果一个方法重载了超类中的方法，那么Javadoc并非必需的。</p>
<h4 id="7-3-3_可选的Javadoc">7.3.3 可选的Javadoc</h4><p>对于包外不可见的类和方法，如有需要，也是要使用Javadoc的。如果一个注释是用来定义一个类，方法，字段的整体目的或行为，<br>那么这个注释应该写成Javadoc，这样更统一更友好。</p>
<h2 id="后记"><a id="End">后记</a></h2><p>本文档翻译自<a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html" target="_blank" rel="external">Google Java Style</a>，<br>译者<a href="http://weibo.com/hawstein" target="_blank" rel="external">@Hawstein</a>。</p>
<p>作者：Hawstein<br>出处：<a href="http://hawstein.com/posts/google-java-style.html" target="_blank" rel="external">http://hawstein.com/posts/google-java-style.html</a><br>声明：本文采用以下协议进行授权： <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="external">自由转载-非商用-非衍生-保持署名|Creative Commons BY-NC-ND 3.0</a> ，转载请注明作者及出处。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="目录">目录</h2><ol>
<li><a href="#Intro">前言</a></li>
<li><a href="#SFBasic">源文件基础</a></li>
<li><a href="#SFStruct">源文件结构</a></li>
<li><a href="#Format">格式</a></li>
<li><a href="#Naming">命名约定</a></li>
<li><a href="#Practice">编程实践</a></li>
<li><a href="#Javadoc">Javadoc</a></li>
<li><a href="#End">后记</a></li>
</ol>
<h2 id="前言"><a id="Intro">前言</a></h2><p>这份文档是Google Java编程风格规范的完整定义。当且仅当一个Java源文件符合此文档中的规则，<br>我们才认为它符合Google的Java编程风格。</p>
<p>与其它的编程风格指南一样，这里所讨论的不仅仅是编码格式美不美观的问题，<br>同时也讨论一些约定及编码标准。然而，这份文档主要侧重于我们所普遍遵循的规则，<br>对于那些不是明确强制要求的，我们尽量避免提供意见。</p>]]>
    
    </summary>
    
      <category term="java" scheme="http://blog.isming.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建Material Design风格的Android应用--定义阴影和裁剪视图]]></title>
    <link href="http://blog.isming.me/2014/10/26/creating-app-with-material-design-three-shadows/"/>
    <id>http://blog.isming.me/2014/10/26/creating-app-with-material-design-three-shadows/</id>
    <published>2014-10-26T14:24:07.000Z</published>
    <updated>2014-12-17T01:56:51.000Z</updated>
    <content type="html"><![CDATA[<p>之前已经写过通过应用主题和使用ListView, CardView,应用Material Design样式，同时都都可以通过support library向下兼容。今天要写的阴影和视图裁剪，无法向下兼容，请注意。</p>
<p>​Material Design 为用户界面元素引入了深度这个元素。深度帮助用户理解各个元素之间的重要关联和帮助用户关注他们手上的任务。</p>
<p>视图的高度（elevation），通过Z属性表现，通过他的阴影确定：ｚ值更高的视图投影出更大的阴影。视图只在Z=0的平面上投影处阴影；他们不会投影阴影在其他放在下面的视图上面和高于z=0的平面。</p>
<a id="more"></a>
<p>有更高Z值的视图挡住Ｚ值较低的视图。无论如何，Ｚ值不会影响到View的大小。</p>
<p>高度也是有用的，当在执行一些动作的时候创建动画让组件升起。</p>
<h3 id="为视图分配高度">为视图分配高度</h3><p>一个View的Z值有两个组成部分，<em>elevation(高度)</em>和<em>translation(平移)</em>.elevation是一个静态部分，translation 用于动画：</p>
<blockquote>
<p>Z = elevation + translationZ</p>
</blockquote>
<p><img src="http://isming.qiniudn.com/shadows-depth.png" alt=""></p>
<p>不同高度的视图的阴影</p>
<p>在布局文件中设置evelation 使用<code>android:elevation</code>，在代码中使用<code>View.setElevation()</code>方法。<br>设置一个视图的平移，使用View.setTranslationZ()方法。</p>
<p>新的方法<code>ViewPropertyAnimator.z()</code>和<code>ViewPropertyAnimator.translationZ()</code>可以让你更容易的变动视图的高度。更多的信息，看ViewPropertyAnimator的Api文档<a href="http://developer.android.com/reference/android/view/ViewPropertyAnimator.html" target="_blank" rel="external">http://developer.android.com/reference/android/view/ViewPropertyAnimator.html</a>。和属性动画的开发指南：<a href="http://developer.android.com/guide/topics/graphics/prop-animation.html" target="_blank" rel="external">http://developer.android.com/guide/topics/graphics/prop-animation.html</a>。</p>
<p>你也可以使用StateListAnimator方式定义这些文件在xml文件中。特别适用于，状态改变时执行的动画，比如用户点击按钮。更多信息，请看动画视图状态改变,下次在动画一节讲。<br>Z值在测量上使用和X,Y值一样的单位。</p>
<h2 id="自定义视图阴影和轮廓">自定义视图阴影和轮廓</h2><p>视图的背景边界决定了阴影的默认形状。轮廓（Outlines）代表了图形对象的外形状，并确定了对触摸反馈区的波纹。</p>
<p>看这个视图，定义一个背景Drawable：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/myview"</span></span><br><span class="line">    <span class="attribute">...</span></span><br><span class="line">    <span class="attribute">android:elevation</span>=<span class="value">"2dp"</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">"@drawable/myrect"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>背景是一个圆角矩形</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- res/drawable/myrect.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">       <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#42000000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">corners</span> <span class="attribute">android:radius</span>=<span class="value">"5dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当这个背景drawable作为视图的轮廓，视图投射出圆角阴影。提供一个自定义的轮廓，可以覆盖默认视图阴影的形状。</p>
<p>在自己的代码中自定义一个轮廓：</p>
<p>1.继承ViewOutlineProvider类<br>2.重写getOutline()方法<br>3.在视图中设置轮廓，使用View.setOutlineProvider()方法</p>
<p>你可以创建椭圆和圆角矩形轮廓使用OutLine类中的方法。视图默认的outline provider会根据视图的背景来生成轮廓。可以设置视图的outline provider为null，来阻止投射阴影。</p>
<p>###　裁剪视图</p>
<p>裁剪视图功能，可以让你更容易的改变视图的形状。你可以裁剪视图为了和其他的设计元素保持一致，或者改变成形状响应用户的输入。你可以裁剪一个视图的轮廓使用<code>View.setClipToOutLine()</code>方法，或者<code>android:clipToOutline</code>属性。只有矩形，圆角矩形，圆圈的轮廓支持被裁剪，可以使用<code>Outline.canClip()</code>方法检测是否支持被裁剪。</p>
<p>裁剪视图到一个drawable的形状，设置drawable作为视图的背景（让视图显示在其上），并且调用<code>View.setClipToOutline()</code>方法。</p>
<p>裁剪视图是一个耗费的操作，裁剪视图时不要使用形状动画。达到这种效果，请使用Reveal Effect 动画(下节讲)。</p>
<p>###　总结</p>
<p>上面可以看到，设置阴影很简单：</p>
<ol>
<li>设置eleavation值。</li>
<li>添加背景或者设置一个outline.</li>
</ol>
<p>参考资料：<a href="http://developer.android.com/training/material/shadows-clipping.html" target="_blank" rel="external">http://developer.android.com/training/material/shadows-clipping.html</a></p>
<blockquote>
<p>原文地址：<a href="http://blog.isming.me/2014/10/26/creating-app-with-material-design-three-shadows/">http://blog.isming.me/2014/10/26/creating-app-with-material-design-three-shadows/</a>，转载请注明出处。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前已经写过通过应用主题和使用ListView, CardView,应用Material Design样式，同时都都可以通过support library向下兼容。今天要写的阴影和视图裁剪，无法向下兼容，请注意。</p>
<p>​Material Design 为用户界面元素引入了深度这个元素。深度帮助用户理解各个元素之间的重要关联和帮助用户关注他们手上的任务。</p>
<p>视图的高度（elevation），通过Z属性表现，通过他的阴影确定：ｚ值更高的视图投影出更大的阴影。视图只在Z=0的平面上投影处阴影；他们不会投影阴影在其他放在下面的视图上面和高于z=0的平面。</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.isming.me/tags/android/"/>
    
      <category term="material design" scheme="http://blog.isming.me/tags/material-design/"/>
    
  </entry>
  
</feed>
